{"version":3,"sources":["webpack:///src/app/job/components/panel/panel.component.ts","webpack:///src/app/job/components/panel/panel.component.html","webpack:///src/app/job/components/forms/school/school.component.ts","webpack:///src/app/job/components/forms/school/school.component.html","webpack:///src/app/job/components/forms/group/group.component.ts","webpack:///src/app/job/components/forms/group/group.component.html","webpack:///src/app/job/components/basket/basket.component.ts","webpack:///src/app/job/components/basket/basket.component.html","webpack:///src/app/job/components/forms/car/car.component.ts","webpack:///src/app/job/components/forms/car/car.component.html","webpack:///src/app/job/components/forms/group-filter/group-filter.component.ts","webpack:///src/app/job/components/forms/group-filter/group-filter.component.html","webpack:///src/app/job/job.module.ts","webpack:///src/app/job/components/forms/promotion-filter/promotion-filter.component.ts","webpack:///src/app/job/components/forms/promotion-filter/promotion-filter.component.html","webpack:///src/app/job/components/qrcode/qrcode.component.ts","webpack:///src/app/job/components/qrcode/qrcode.component.html","webpack:///src/app/job/components/forms/setting/setting.component.ts","webpack:///src/app/job/components/forms/setting/setting.component.html","webpack:///src/app/job/components/forms/index.ts","webpack:///src/app/job/components/forms/feedback/feedback.component.ts","webpack:///src/app/job/components/forms/feedback/feedback.component.html","webpack:///src/app/job/components/editor/editor.component.ts","webpack:///src/app/job/components/editor/editor.component.html","webpack:///src/app/job/components/event/event.component.ts","webpack:///src/app/job/components/event/event.component.html","webpack:///src/app/job/components/forms/event-filter/event-filter.component.ts","webpack:///src/app/job/components/forms/event-filter/event-filter.component.html","webpack:///src/app/job/components/index.ts","webpack:///src/app/job/components/forms/event/event.component.ts","webpack:///src/app/job/components/forms/event/event.component.html","webpack:///src/app/job/components/forms/profile/profile.component.ts","webpack:///src/app/job/components/forms/profile/profile.component.html","webpack:///src/app/job/job-routing.module.ts","webpack:///src/app/job/components/help/help.component.ts","webpack:///src/app/job/components/help/help.component.html","webpack:///src/app/job/components/reward/reward.component.ts","webpack:///src/app/job/components/reward/reward.component.html"],"names":["injector","create","providers","provide","deps","PanelComponent","cfr","activatedRoute","dialog","dataService","httpService","transformService","progress","mode","value","color","url","snapshot","itemUrl","substring","indexOf","get","subscribe","next","componentFactory","resolveComponentFactory","component","msg","status","transform","instance","onEnter","show","panelRef","insert","hostView","comp","error","complete","idx","actions","type","params","result","navigator","share","title","text","location","origin","key","then","console","log","alert","openDialog","dialogRef","open","maxWidth","maxHeight","height","width","data","afterClosed","undefined","sub","unsubscribe","v","SchoolComponent","fb","icon","slotsNum","types","categories","professions","lastPart","substr","lastIndexOf","uuidRegex","isEdit","match","formGroup","group","slots","initSlots","valid","raw","getRawValue","map","slot","slotStartDate","Date","start","offset","getTimezoneOffset","getTime","toISOString","slotEndDate","end","save","values","close","pSlots","createSlot","length","addControl","required","minLength","dateFrom","now","name","locationKey","range","role","event","opts","preventDefault","stopPropagation","controls","i","removeAt","action","fileInput","click","addSlot","e","formData","FormData","append","target","files","upload","UploadProgress","Math","round","loaded","total","Response","body","back","onClick","DateTimeRangeValidator","control","GroupFormComponent","images","regNum","make","model","year","pattern","capacity","image","n","Array","src","split","id","mtx","setValue","BasketComponent","items","replace","selected","onSelect","keys","item","push","info","selectedIdx","overlayData","splice","onBasket","evt","hasOwnProperty","reset","onDelete","CarFormComponent","GroupFilterComponent","navService","actionUrl","set","setting","JobModule","PromotionFilterComponent","templateTypes","rated","QrcodeComponent","camera","qrCode","post","code","on","onScanned","SettingComponent","router","groups","init","findIndex","current","viewValue","system","openConfirmation","btn","groupForm","Blob","JSON","stringify","groupType","groupTypes","groupName","notif","like","root","profile","navigate","auth","signOut","FeedbackFormComponent","rate","desc","maxLength","onRate","EditorComponent","eventBusService","domSanitizer","img","size","canvas","load","edited","file","reader","FileReader","onload","readAsDataURL","rotate","emit","degree","selectFile","EventComponent","EventFilterComponent","eventCategories","currencies","category","city","free","DESC_MIN","DESC_MAX","EventFormComponent","isPriority","isMain","extra","main","isAdd","eventTypes","filter","obj","amount","validators","chatKeyValidators","chatUrlValidators","validatorsForChatKey","isoDateFrom","setMinutes","getMinutes","isoDateTo","optional","ticket","chatKey","disabled","position","x","y","urlRef","validator","min","max","RangeValidator","telNum","priority","rule","balanced","met","expense","currency","clearValidators","setValidators","updateValueAndValidity","trim","onTypeChange","startS","endS","AUDIO_LENGTH","ProfileComponent","isPlay","isRecord","recordPos","playPos","playLimit","languages","statuses","firstName","gender","profession","voice","voiceUrl","pos","voiceData","mediaDevices","getUserMedia","audio","stream","chunks","recorder","MediaRecorder","ondataavailable","state","blob","bypassSecurityTrustUrl","URL","createObjectURL","interval","setInterval","setTimeout","clearInterval","stop","voiceObj","nativeElement","method","currentTime","record","play","updateTime","ended","routes","path","redirectTo","pathMatch","reuse","children","multiple","animation","JobRoutingModule","forChild","HelpComponent","RewardComponent","rewards"],"mappings":"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","file":"job-job-module-es5.js","sourcesContent":["import { HttpParams } from '@angular/common/http';\nimport {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injector,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { HttpService } from 'src/app/services/http.service';\nimport { MsPanel } from 'src/lib';\nimport { DataService } from '../../../services/data.service';\nimport { TransformService } from '../../../services/transform.service';\n\nconst injector = Injector.create({\n  providers: [{ provide: MsPanel, deps: [] }],\n});\n\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n})\nexport class PanelComponent implements OnInit, OnDestroy {\n  @ViewChild('panel', { static: true, read: ViewContainerRef })\n  panelRef: ViewContainerRef;\n\n  private sub: Subscription;\n\n  actions: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  value: any;\n\n  private url: any;\n  private itemUrl: any;\n\n  private comp: ComponentRef<MsPanel>;\n\n  constructor(\n    private cfr: ComponentFactoryResolver,\n    private activatedRoute: ActivatedRoute,\n    public dialog: MatDialog,\n    public dataService: DataService,\n    private httpService: HttpService,\n    public transformService: TransformService\n  ) {\n    let url = this.activatedRoute['_routerState'].snapshot.url;\n    this.itemUrl = url;\n\n    url = url.substring(1);\n    this.url = url.substring(url.indexOf('/'));\n\n    this.progress.mode = 'indeterminate';\n\n    this.httpService.get(this.url).subscribe({\n      next: (value) => {\n        this.value = value;\n\n        const componentFactory = this.cfr.resolveComponentFactory(MsPanel);\n        const component = componentFactory.create(injector);\n\n        let msg;\n        if (this.value['profile'].status !== 'P') {\n          msg = this.transformService.transform(value, this.itemUrl);\n        }\n\n        component.instance.onEnter('', msg);\n\n        component.instance.show(true, true);\n        this.panelRef.insert(component.hostView);\n        this.comp = component;\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n\n  doAction(idx) {\n    switch (this.actions[idx].type) {\n      case 'share':\n        const params = new HttpParams();\n\n        this.httpService.get(this.url + '/share', params).subscribe({\n          next: (result) => {\n            if (navigator.share) {\n              navigator\n                .share({\n                  title: result['info'].title,\n                  text: result['info'].msg,\n                  url: location.origin + '?xlink=' + result['link'].key,\n                })\n                .then(() => {\n                  console.log('Thanks for sharing!');\n                })\n                .catch(console.error);\n            } else {\n              console.log({\n                title: result['info'].title,\n                text: result['info'].msg,\n                url: location.origin + '?xlink=' + result['link'].key,\n              });\n              alert('Not implemented for desktop!');\n            }\n          },\n          error: (error) => {\n            this.progress.mode = 'determine';\n            this.progress.color = 'warn';\n          },\n          complete: () => {\n            console.log('complete');\n          },\n        });\n        break;\n      default:\n        this.openDialog(idx);\n    }\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(this.actions[idx].component, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: { value: this.value, url: this.url },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      switch (this.actions[idx].type) {\n        case 'filter':\n          break;\n        case 'add':\n          break;\n        case 'attach':\n          break;\n        case 'logout':\n          break;\n        case 'edit':\n          if (result !== undefined) {\n            this.value = result;\n            this.comp.instance.onEnter(\n              '',\n              this.transformService.transform(result, this.itemUrl, false, true)\n            );\n            this.panelRef.insert(this.comp.hostView);\n          }\n          break;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.data.subscribe((v) => {\n      this.actions = v.actions;\n    });\n  }\n}\n","<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<ng-container #panel>\n</ng-container>\n<div class=\"mat-fab-container\">\n  <button\n    *ngFor=\"let action of actions; let idx = index\"\n    mat-mini-fab\n    [color]=\"action.color ? action.color : 'primary'\"\n    (click)=\"doAction(idx)\"\n  >\n    <mat-icon>{{ action.icon }}</mat-icon>\n  </button>\n</div>\n","import { HttpEventType } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\nimport { HttpService } from 'src/app/services/http.service';\n\n// https://www.mokkapps.de/blog/manually-lazy-load-modules-and-components-in-angular/\n// https://juristr.com/blog/2019/10/lazyload-module-ivy-viewengine/\n\n@Component({\n  selector: 'app-school',\n  templateUrl: './school.component.html',\n})\nexport class SchoolComponent implements OnInit {\n  formGroup: FormGroup;\n\n  types: any;\n  professions: any;\n\n  isEdit: any;\n\n  actions = [\n    {\n      type: 'add',\n      icon: 'add',\n    },\n    {\n      component: SchoolComponent,\n      type: 'file',\n      icon: 'file_upload',\n      color: 'warn',\n    },\n  ];\n\n  slotsNum = 0;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<SchoolComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService\n  ) {\n    this.types = this.dataService.categories;\n    this.professions = this.dataService.professions;\n\n    this.data = data.value ? data.value : {};\n    this.url = data.url;\n\n    const lastPart = this.url.substr(this.url.lastIndexOf('/') + 1);\n    const uuidRegex =\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\n    this.isEdit = lastPart.match(uuidRegex) !== null ? true : false;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({});\n    let slots = [];\n    if (!this.isEdit) {\n      slots = [{}];\n    } else {\n      slots = [this.data];\n    }\n\n    this.initSlots(slots, this.formGroup);\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      const raw = this.formGroup.getRawValue();\n\n      // convert to UTC - in every form it needs to be done\n      const data = (raw.slots as Array<object>).map((slot) => {\n        const slotStartDate = new Date(slot['range'].start);\n        const offset = slotStartDate.getTimezoneOffset() * 60000;\n        slot['range'].start = new Date(\n          slotStartDate.getTime() - offset\n        ).toISOString();\n\n        const slotEndDate = new Date(slot['range'].end);\n        slot['range'].end = new Date(\n          slotEndDate.getTime() - offset\n        ).toISOString();\n        if (slot['key'] === null) {\n          delete slot['key'];\n        }\n        return slot;\n      });\n\n      this.httpService.save(this.url, data).subscribe({\n        next: (values) => {\n          this.dialogRef.close(values);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  initSlots(pSlots, formGroup) {\n    const slots = pSlots.map((slot) => this.createSlot(slot));\n    this.slotsNum = slots.length;\n\n    formGroup.addControl(\n      'slots',\n      new FormArray(slots, [Validators.required, Validators.minLength(1)])\n    );\n  }\n\n  createSlot(data): FormGroup {\n    const offset = new Date().getTimezoneOffset() * 60000;\n    const dateFrom = new Date(Date.now() - offset);\n\n    return this.fb.group({\n      key: [data.key ? data.key : undefined],\n      type: [data.type, Validators.required],\n      name: [data.name, Validators.required],\n      locationKey: [data.locationKey, Validators.required], // google\n      range: this.fb.group({\n        start: [\n          data.range ? new Date(data.range.start) : dateFrom,\n          Validators.required,\n        ],\n        end: [\n          data.range ? new Date(data.range.end) : null,\n          Validators.required,\n        ],\n      }),\n      role: [data.role, Validators.required],\n    });\n  }\n\n  addSlot(event?, opts = {}) {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    (this.formGroup.controls['slots'] as FormArray).insert(\n      0,\n      this.createSlot(opts)\n    );\n\n    this.slotsNum++;\n  }\n\n  removeSlot(event, i) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    (this.formGroup.controls['slots'] as FormArray).removeAt(i);\n\n    this.slotsNum--;\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n\n  doAction(event, action, fileInput?) {\n    if (action.type === 'file' && fileInput !== undefined) {\n      fileInput.click();\n    } else if (action.type === 'add') {\n      this.addSlot(event);\n    }\n  }\n\n  selectFile(e?): void {\n    this.progress.mode = 'indeterminate';\n\n    const formData = new FormData();\n    formData.append('file', e.target.files[0]);\n\n    const url = this.url + '/parse';\n    this.httpService.upload(url, formData).subscribe({\n      next: (event) => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.progress.mode = 'determine';\n          this.progress.value = Math.round(100 * (event.loaded / event.total));\n        } else if (event.type === HttpEventType.Response) {\n          (event.body as Array<any>).map((data) =>\n            this.addSlot(undefined, data)\n          );\n        }\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n}\n\nconst DateTimeRangeValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const start = new Date(control.get('start').value);\n  const end = new Date(control.get('end').value);\n  return start !== null && end !== null && start < end ? null : { range: true };\n};\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel\n        formArrayName=\"slots\"\n        *ngFor=\"let slot of formGroup.controls.slots['controls']; let i = index\"\n      >\n        <mat-expansion-panel-header\n          btn-accordion\n          [style.background-color]=\"slot.valid ? 'yellowgreen' : '#f44336'\"\n        >\n          <button\n            mat-mini-fab\n            color=\"accent\"\n            (click)=\"removeSlot($event, i)\"\n            *ngIf=\"slotsNum > 1\"\n          >\n            <mat-icon>remove</mat-icon>\n          </button>\n          <mat-panel-title>{{\n            (slot.get('name').value !== null ? slot.get('name').value : '') +\n              ' - ' +\n              '(' +\n              (slot.get('range').get('start').value !== null\n                ? (slot.get('range').get('start').value | date: 'dd/MM/yyyy')\n                : '') +\n              '-' +\n              (slot.get('range').get('end').value !== null\n                ? (slot.get('range').get('end').value | date: 'dd/MM/yyyy')\n                : '') +\n              ')'\n          }}</mat-panel-title>\n        </mat-expansion-panel-header>\n        <div [formGroupName]=\"i\">\n          <mat-form-field>\n            <mat-label>Type</mat-label>\n            <mat-select formControlName=\"type\">\n              <mat-option *ngFor=\"let type of types\" [value]=\"type.value\">\n                {{ type.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Enter name</mat-label>\n            <input matInput [formControlName]=\"'name'\" />\n            <mat-error *ngIf=\"slot.get('name').invalid\"\n              >Name is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Reference link (Google etc.)</mat-label>\n            <input matInput formControlName=\"locationKey\" />\n            <mat-error *ngIf=\"slot.get('locationKey').invalid\"\n              >Address is required!</mat-error\n            >\n          </mat-form-field>\n          <fieldset [formGroupName]=\"'range'\">\n            <legend>Time</legend>\n            <mat-form-field>\n              <mat-label>From</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"pickerStart\"\n                formControlName=\"start\"\n                placeholder=\"Start date\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"pickerStart\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #pickerStart></mat-datepicker>\n            </mat-form-field>\n            <mat-form-field>\n              <mat-label>From</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"pickerEnd\"\n                formControlName=\"end\"\n                placeholder=\"end date\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"pickerEnd\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #pickerEnd></mat-datepicker>\n            </mat-form-field>\n            <mat-error *ngIf=\"slot.get('range').invalid\"\n              >Invalid range!</mat-error\n            >\n          </fieldset>\n          <mat-form-field>\n            <mat-label>Enter role</mat-label>\n            <input matInput formControlName=\"role\" />\n            <mat-error *ngIf=\"slot.get('role').invalid\"\n              >Role is required!</mat-error\n            >\n          </mat-form-field>\n        </div>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n<div *ngIf=\"!isEdit\" class=\"mat-fab-container\">\n  <button\n    *ngFor=\"let action of actions; let idx = index\"\n    mat-mini-fab\n    [color]=\"action.color ? action.color : 'primary'\"\n    (click)=\"doAction($event, action, fileInput)\"\n  >\n    <mat-icon>{{ action.icon }}</mat-icon>\n  </button>\n  <input\n    type=\"file\"\n    #fileInput\n    class=\"file_button\"\n    (change)=\"selectFile($event)\"\n  />\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { EditorComponent } from '../../editor/editor.component';\n\n@Component({\n  selector: 'app-group',\n  templateUrl: './group.component.html',\n})\nexport class GroupFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  images: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<GroupFormComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.data = data.value ? data.value : { images: [] };\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        regNum: [this.data.regNum, Validators.required],\n        make: [this.data.make, Validators.required],\n        model: [this.data.model, Validators.required],\n        color: [this.data.color, Validators.required],\n        year: [\n          this.data.year,\n          [Validators.required, Validators.pattern('^[0-9]{4}$')],\n        ],\n        capacity: [\n          this.data.capacity,\n          [Validators.required, Validators.pattern('^[0-9]+$')],\n        ],\n      }),\n      images: [\n        [...this.data.images],\n        [Validators.required, Validators.minLength(1)],\n      ],\n    });\n\n    this.images = (this.data.images as Array<string>).map(\n      (image) =>\n        location.origin + '/backend' + this.url + '/images/' + image['name']\n    );\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(EditorComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        idx,\n        src:\n          this.images[idx] !== undefined\n            ? this.images[idx].split('?')[0] + '_orig'\n            : this.images[idx],\n        value: this.formGroup.controls['images'].value[idx],\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        const images = this.formGroup.controls['images'].value;\n        images[result.idx] = { name: result.id, mtx: result.mtx };\n        this.formGroup.controls['images'].setValue(images);\n        this.data.images[result.idx] = images[result.idx];\n\n        this.images = (this.data.images as Array<string>).map(\n          (image) =>\n            location.origin +\n            '/backend' +\n            this.url +\n            '/images/' +\n            image['name'] +\n            '?' +\n            Date.now()\n        );\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      raw.data.images = raw.images;\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Group data</mat-panel-title>\n        </mat-expansion-panel-header>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.images.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Images</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <mat-card\n          matRipple\n          default\n          *ngFor=\"let n of numSequence(1); let i = index\"\n          (click)=\"openDialog(i)\"\n        >\n          <img *ngIf=\"images.length > i\" mat-card-image [src]=\"images[i]\" />\n        </mat-card>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpService } from 'src/app/services/http.service';\n\n@Component({\n  selector: 'app-basket',\n  templateUrl: './basket.component.html',\n})\nexport class BasketComponent implements OnInit {\n  items: Array<any> = new Array();\n\n  selectedIdx: any;\n  overlayData: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  url: any;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public dialogRef: MatDialogRef<BasketComponent>,\n    private activatedRoute: ActivatedRoute,\n    private httpService: HttpService\n  ) {\n    /*if (data.url !== undefined) {\n      this.url = data.url;\n    } else {*/\n    let url = this.activatedRoute['_routerState'].snapshot.url.replace(\n      '/base',\n      ''\n    );\n\n    url = url.substring(1);\n    this.url = url.substring(url.indexOf('/'));\n\n    //}\n  }\n\n  ngOnInit(): void {\n    if (this.data.selected !== undefined) {\n      this.onSelect(this.data.selected);\n    }\n  }\n\n  onClick(): void {\n    // attach the selected members\n    if (this.items.length > 0) {\n      if (this.data.save !== false) {\n        this.progress.mode = 'indeterminate';\n\n        const keys = new Array();\n        for (const item of this.items) {\n          keys.push(item.info.id);\n        }\n\n        this.httpService.save(this.url, keys).subscribe({\n          next: (value) => {\n            this.dialogRef.close(value);\n          },\n          error: (error) => {\n            this.progress.mode = 'determine';\n            this.progress.color = 'warn';\n          },\n          complete: () => {\n            this.progress.mode = 'determine';\n          },\n        });\n      } else {\n        this.dialogRef.close(this.items);\n      }\n    }\n  }\n\n  onBasket(idx): void {\n    if (idx === this.selectedIdx) {\n      this.selectedIdx = undefined;\n      this.overlayData = undefined;\n    } else {\n      this.selectedIdx = idx;\n      this.overlayData = this.items[idx].info;\n    }\n  }\n\n  onDelete(): void {\n    this.items.splice(this.selectedIdx, 1);\n    this.onBasket(this.selectedIdx);\n  }\n\n  onSelect(evt): void {\n    const items = new Array();\n    for (const item in evt) {\n      if (evt.hasOwnProperty(item)) {\n        items.push(evt[item]);\n      }\n    }\n    this.items = items; // [].concat(this.items.concat(items));\n  }\n\n  back(): void {\n    if (this.data.reset) {\n      this.dialogRef.close({});\n    } else {\n      this.dialogRef.close();\n    }\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  <div class=\"mat-basket-container\" *ngIf=\"!data.dialog\">\n    <mat-chip-list>\n      <mat-chip\n        *ngFor=\"let item of items; let idx = index\"\n        (click)=\"onBasket(idx)\" [ngClass]=\"{'ms-active': idx === selectedIdx}\"\n        matRipple\n      >\n      <p *ngIf=\"item.info.imgs && item.info.imgs[0]\" style=\"width: 40px;\">{{ item.info.header ? item.info.header.main : '' }}</p>\n      <p *ngIf=\"!item.info.imgs || !item.info.imgs[0]\">{{ item.info.header ? item.info.header.main : '' }}</p>\n        <mat-chip-avatar *ngIf=\"item.info.imgs && item.info.imgs[0]\"><img [src]=\"item.info.imgs[0]\"/></mat-chip-avatar>\n      </mat-chip>\n    </mat-chip-list>\n  </div>\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\" *ngIf=\"!data.dialog\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<div class=\"mat-basket-content\">\n  <ms-list\n    [url]=\"data.url\"\n    [multiple]=\"data.multiple\"\n    [actions]=\"data.actions\"\n    (msSelect)=\"onSelect($event)\"\n    [overlayData]=\"overlayData\"\n    (msDelete)=\"onDelete()\"\n    [selectable]=\"!data.dialog && true\"\n  >\n  </ms-list>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { EditorComponent } from '../../editor/editor.component';\n\n@Component({\n  selector: 'app-car',\n  templateUrl: './car.component.html',\n})\nexport class CarFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  images: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<CarFormComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.data = data.value ? data.value : { images: [] };\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        regNum: [this.data.regNum, Validators.required],\n        make: [this.data.make, Validators.required],\n        model: [this.data.model, Validators.required],\n        color: [this.data.color, Validators.required],\n        year: [\n          this.data.year,\n          [Validators.required, Validators.pattern('^[0-9]{4}$')],\n        ],\n        capacity: [\n          this.data.capacity,\n          [Validators.required, Validators.pattern('^[0-9]+$')],\n        ],\n      }),\n      images: [\n        [...this.data.images],\n        [Validators.required, Validators.minLength(1)],\n      ],\n    });\n\n    this.images = (this.data.images as Array<string>).map(\n      (image) =>\n        location.origin + '/backend' + this.url + '/images/' + image['name']\n    );\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(EditorComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        idx,\n        src:\n          this.images[idx] !== undefined\n            ? this.images[idx].split('?')[0] + '_orig'\n            : this.images[idx],\n        value: this.formGroup.controls['images'].value[idx],\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        const images = this.formGroup.controls['images'].value;\n        images[result.idx] = { name: result.id, mtx: result.mtx };\n        this.formGroup.controls['images'].setValue(images);\n        this.data.images[result.idx] = images[result.idx];\n\n        this.images = (this.data.images as Array<string>).map(\n          (image) =>\n            location.origin +\n            '/backend' +\n            this.url +\n            '/images/' +\n            image['name'] +\n            '?' +\n            Date.now()\n        );\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      raw.data.images = raw.images;\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Personal data</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Registration number</mat-label>\n          <input\n            matInput\n            [formControlName]=\"'regNum'\"\n            placeholder=\"e.g. SA-335CO\"\n          />\n          <mat-error *ngIf=\"formGroup.controls.data.get('regNum').invalid\"\n            >Registration Number is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Make</mat-label>\n          <input matInput [formControlName]=\"'make'\" placeholder=\"e.g. Ford\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('make').invalid\"\n            >Make is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Model</mat-label>\n          <input\n            matInput\n            [formControlName]=\"'model'\"\n            placeholder=\"e.g. Focus\"\n          />\n          <mat-error *ngIf=\"formGroup.controls.data.get('model').invalid\"\n            >Model is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Color</mat-label>\n          <input matInput [formControlName]=\"'color'\" placeholder=\"e.g. blue\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('color').invalid\"\n            >Color is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Year</mat-label>\n          <input\n            matInput\n            [formControlName]=\"'year'\"\n            placeholder=\"e.g. 1992\"\n            maxlength=\"4\"\n          />\n          <mat-error *ngIf=\"formGroup.controls.data.get('year').invalid\"\n            >Year is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Capacity</mat-label>\n          <input matInput [formControlName]=\"'capacity'\" maxlength=\"4\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('capacity').invalid\"\n            >Capacity is required!</mat-error\n          >\n        </mat-form-field>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.images.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Images</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <mat-card\n          matRipple\n          default\n          *ngFor=\"let n of numSequence(1); let i = index\"\n          (click)=\"openDialog(i)\"\n        >\n          <img *ngIf=\"images.length > i\" mat-card-image [src]=\"images[i]\" />\n        </mat-card>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavigationService } from 'src/app/navigation.service';\nimport { DataService } from 'src/app/services/data.service';\nimport { HttpService } from 'src/app/services/http.service';\n\ninterface Option {\n  value: string;\n  viewValue: string;\n}\n\n// distance bar also, not just calendar bar\n\n@Component({\n  selector: 'app-group-filter',\n  templateUrl: './group-filter.component.html',\n})\nexport class GroupFilterComponent implements OnInit {\n  formGroup: FormGroup;\n\n  progress: any = { mode: 'determine', value: 0, color: 'primary' };\n\n  url: any;\n\n  key: any;\n\n  setting: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<GroupFilterComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dataService: DataService,\n    private activatedRoute: ActivatedRoute,\n    private httpService: HttpService,\n    private navService: NavigationService\n  ) {\n    this.url = '/user/settings';\n\n    let actionUrl = this.activatedRoute['_routerState'].snapshot.url.replace(\n      '/base',\n      ''\n    );\n\n    actionUrl = actionUrl.substring(1);\n    this.key = actionUrl.substring(actionUrl.indexOf('/'));\n  }\n\n  onData(key, evt): void {\n    this.formGroup.controls[key].setValue(evt.value);\n  }\n\n  ngOnInit(): void {\n    let params = new HttpParams();\n    params = params.set('key', this.key);\n\n    this.httpService.get(this.url, params).subscribe({\n      next: (result) => {\n        let formGroup = new FormGroup({});\n\n        this.setting = result;\n        this.setting.items.map((item) => {\n          switch (item.type) {\n            case 'os':\n              formGroup.addControl(item.name, new FormControl([...item.data]));\n            default:\n          }\n        });\n\n        this.formGroup = formGroup;\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      let raw = this.formGroup.getRawValue();\n\n      let items = this.setting.items.map((item) => {\n        if (raw[item.name] instanceof Array) {\n          item.data = [...raw[item.name]];\n        } else {\n          item.data = [raw[item.name]];\n        }\n        return item;\n      });\n\n      this.setting.items = items;\n\n      let params = new HttpParams();\n      params = params.set('key', this.key);\n\n      this.httpService.save(this.url, this.setting, params).subscribe({\n        next: (result) => {\n          this.dialogRef.close(result['items']);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n    <fieldset *ngFor=\"let item of setting.items\">\n      <legend>{{item.name}}</legend>\n      <div legend-right>{{ item.options[formGroup.controls[item.name].value].viewValue }}</div>\n      <mat-slider\n        min=\"0\"\n        [max]=\"item.options.length - 1\"\n        [formControlName]=\"item.name\"\n        (input)=\"onData(item.name, $event)\"\n      ></mat-slider>\n    </fieldset>\n  </form>\n</div>\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UIModule } from '../ui/ui.module';\nimport {\n  BasketComponent,\n  CarFormComponent,\n  EditorComponent,\n  EventComponent,\n  EventFilterComponent,\n  PromotionFilterComponent,\n  GroupFilterComponent,\n  EventFormComponent,\n  FeedbackFormComponent,\n  PanelComponent,\n  ProfileComponent,\n  QrcodeComponent,\n  SchoolComponent,\n  SettingComponent,\n  HelpComponent,\n  GroupFormComponent,\n  RewardComponent,\n} from './components';\nimport { JobRoutingModule } from './job-routing.module';\n@NgModule({\n  declarations: [\n    CarFormComponent,\n    ProfileComponent,\n    SettingComponent,\n    EventFormComponent,\n    EventFilterComponent,\n    PromotionFilterComponent,\n    GroupFilterComponent,\n    PanelComponent,\n    EditorComponent,\n    SchoolComponent,\n    BasketComponent,\n    EventComponent,\n    FeedbackFormComponent,\n    QrcodeComponent,\n    HelpComponent,\n    GroupFormComponent,\n    RewardComponent,\n  ],\n  imports: [\n    UIModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    JobRoutingModule,\n  ],\n  providers: [DatePipe],\n})\nexport class JobModule { }\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\n\n// Group-Filter has the common filter settings handling - this component will be removed\ninterface Option {\n  value: string;\n  viewValue: string;\n}\n@Component({\n  selector: 'app-promotion-filter',\n  templateUrl: './promotion-filter.component.html',\n})\nexport class PromotionFilterComponent implements OnInit {\n  formGroup: FormGroup;\n\n  types: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<PromotionFilterComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dataService: DataService\n  ) {\n    this.types = this.dataService.templateTypes;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      type: [this.data.type],\n      rated: [this.data.rated],\n    });\n  }\n\n  onClick(): void {\n    let raw;\n\n    if (this.formGroup.valid) {\n      raw = this.formGroup.getRawValue();\n    }\n    this.dialogRef.close(raw);\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-form-field>\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"type\">\n        <mat-option\n          *ngFor=\"let type of types\"\n          [value]=\"type.value\"\n        >\n          {{ type.viewValue }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </form>\n</div>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from '../../../services/data.service';\n\n@Component({\n  selector: 'app-qrcode',\n  templateUrl: './qrcode.component.html',\n})\nexport class QrcodeComponent implements OnInit {\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n  \n  camera = false;\n  qrCode = 'sample text';\n\n  constructor(\n    public dialogRef: MatDialogRef<QrcodeComponent>,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    const params = new HttpParams();\n\n    this.httpService.get(this.url + '/code', params).subscribe({\n      next: (result) => {\n        this.qrCode = result['code'];\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  onScanned(evt): void {\n    this.httpService.post(this.url + '/verify', { code: evt }).subscribe({\n      next: (value) => {\n        this.dialogRef.close(value);\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n\n  turnCamera(on = false): void {\n    this.camera = on;\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-dialog-img\">\n  <ms-qrcode [qrCode]=\"qrCode\" [camera]=\"camera\" (msScanned)=\"onScanned($event)\"></ms-qrcode>\n</div>\n<div mat-dialog-actions align=\"center\">\n  <button *ngIf=\"!camera\" mat-icon-button (click)=\"turnCamera(true)\">\n    <mat-icon>cameraswitch</mat-icon>\n  </button>\n  <button *ngIf=\"camera\" mat-icon-button (click)=\"turnCamera(false)\">\n    <mat-icon>qr_code</mat-icon>\n  </button>\n</div>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport firebase from 'firebase/app';\nimport { NavigationService } from 'src/app/navigation.service';\nimport { HttpService } from 'src/app/services/http.service';\nimport { environment } from 'src/environments/environment';\nimport { MsDialog } from 'src/lib';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './setting.component.html',\n})\nexport class SettingComponent implements OnInit {\n  progress: any = { mode: 'determine', value: 0, color: 'primary' };\n\n  url: any;\n\n  formGroup: FormGroup;\n\n  groups: any = [];\n\n  selected;\n\n  current;\n\n  constructor(\n    private router: Router,\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<SettingComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    private navService: NavigationService\n  ) {\n    this.url = '/user';\n  }\n\n  ngOnInit(): void {\n    const params = new HttpParams();\n\n    this.httpService.get(this.url, params).subscribe({\n      next: (data) => {\n        this.init(data);\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  onSelect(evt) {\n    const idx = this.groups.findIndex((group) => group.value === evt.value);\n    this.selected = this.groups[idx];\n  }\n\n  init(data) {\n    this.current = data['user'].group;\n\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        key: [data['user'].group, Validators.required],\n      }),\n    });\n\n    const groups = [];\n    for (const item of data['groups']) {\n      groups.push({\n        value: item.group.key,\n        viewValue: item.group.name,\n        system: item.group.system,\n      });\n    }\n    this.groups = groups;\n\n    this.onSelect({ value: data['user'].group });\n  }\n\n  leave() {\n    this.openConfirmation(\n      'Would you like to leave the ' + this.selected.viewValue + ' group!'\n    );\n  }\n\n  openConfirmation(msg) {\n    const dialogRef = this.dialog.open(MsDialog, {\n      data: {\n        msg,\n        btn: 'Yes',\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === true) {\n        const params = new HttpParams();\n\n        this.httpService\n          .save(this.url + '/groups/' + this.selected.value + '/leave', params)\n          .subscribe({\n            next: (data) => {\n              this.init(data);\n            },\n            error: (error) => {\n              this.progress.mode = 'determine';\n              this.progress.color = 'warn';\n            },\n            complete: () => {\n              console.log('complete');\n            },\n          });\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      const raw = this.formGroup.getRawValue();\n\n      const formData = new FormData();\n\n      const groupForm = new Blob([JSON.stringify(raw.data)], {\n        type: 'application/json',\n      });\n      formData.append('group', groupForm);\n\n      this.httpService.save(this.url, formData).subscribe({\n        next: (value) => {\n          const group = value['user'].group;\n          const groups = value['groups'];\n\n          let groupType;\n          for (const item of groups) {\n            if (item.group.key === group) {\n              groupType = environment.groupTypes[item.group.type];\n              this.navService.groupName = item.group.name[0];\n              break;\n            }\n          }\n\n          const notif = {};\n          for (const like of value['likes']) {\n            notif[groupType + '/' + like.root] = like.value;\n          }\n          this.navService.notif = notif;\n\n          if (\n            value['user'].profile === undefined ||\n            value['user'].profile.status === 'I'\n          ) {\n            this.router.navigate([groupType + '/user']);\n          } else {\n            this.router.navigate([groupType]);\n          }\n\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    // stale value !!!\n    this.dialogRef.close();\n  }\n\n  logout(): void {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        console.log('logout');\n        this.navService.reset.next();\n        this.back();\n      })\n      .catch((error) => {\n        // An error happened.\n      });\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>&nbsp;\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<form default *ngIf=\"formGroup\" [formGroup]=\"formGroup\">\n  <div formGroupName=\"data\">\n    <fieldset>\n      <legend>Group</legend>\n      <mat-form-field>\n        <mat-select [formControlName]=\"'key'\" (selectionChange)=\"onSelect($event)\">\n          <mat-option *ngFor=\"let group of groups\" [value]=\"group.value\">\n            {{ group.viewValue }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <button *ngIf=\"!selected.system\" mat-raised-button color=\"warn\" (click)=\"leave()\">\n        Leave\n      </button>\n      <button *ngIf=\"selected.value !== current\" mat-raised-button color=\"primary\" (click)=\"onClick()\">\n        Switch\n      </button>\n    </fieldset>\n    <div button-row>\n      <button mat-raised-button color=\"accent\" (click)=\"logout()\">\n        Logout\n      </button>\n    </div>\n  </div>\n</form>\n","export * from './car/car.component';\nexport * from './group/group.component';\nexport * from  './event-filter/event-filter.component';\nexport * from  './promotion-filter/promotion-filter.component';\nexport * from  './group-filter/group-filter.component';\nexport * from  './event/event.component';\nexport * from  './profile/profile.component';\nexport * from  './school/school.component';\nexport * from  './setting/setting.component';\nexport * from  './feedback/feedback.component';\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from 'src/app/services/data.service';\n\n@Component({\n  selector: 'app-feedback',\n  templateUrl: './feedback.component.html',\n})\nexport class FeedbackFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<FeedbackFormComponent>,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.data = data.value ? data.value : { images: [] };\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        rate: [this.data.rate, Validators.required],\n        desc: [\n          this.data.desc !== undefined ? this.data.desc : '',\n          [\n            Validators.required,\n            Validators.minLength(10),\n            Validators.maxLength(160),\n          ],\n        ],\n      }),\n    });\n  }\n\n  onRate(evt): void {\n    this.data.rate = evt.value;\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Feedback</mat-panel-title>\n        </mat-expansion-panel-header>\n        <fieldset>\n          <legend>Rate</legend>\n          <div legend-right>{{ data.rate }}</div>\n          <mat-slider\n            min=\"0\"\n            max=\"9\"\n            [formControlName]=\"'rate'\"\n            (input)=\"onRate($event)\"\n          ></mat-slider>\n        </fieldset>\n        <fieldset>\n          <legend>Description (min. 10, max. 160)</legend>\n          <div legend-right>\n            {{ formGroup.controls.data.get('desc').value.length }}\n          </div>\n          <mat-form-field>\n            <textarea\n              matInput\n              [formControlName]=\"'desc'\"\n              rows=\"5\"\n              maxlength=\"160\"\n            ></textarea>\n            <mat-error *ngIf=\"formGroup.controls.data.get('desc').invalid\"\n              >Description is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { HttpEventType } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Canvas } from 'src/lib/offscreen';\nimport { HttpService } from '../../../services/http.service';\nimport { EventBusService } from '../../../services/event-bus.service';\n\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n})\nexport class EditorComponent implements OnInit {\n  private mtx: any;\n  private img: any;\n  private size: any;\n  private file: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  constructor(\n    public dialogRef: MatDialogRef<EditorComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private eventBusService: EventBusService,\n    public httpService: HttpService,\n    private domSanitizer: DomSanitizer\n  ) {}\n\n  onChange(evt) {\n    if (evt.img) {\n      this.img = evt.img;\n    }\n\n    if (evt.size) {\n      this.size = evt.size;\n    }\n\n    if (evt.mtx) {\n      this.mtx = evt.mtx;\n    }\n  }\n\n  ngOnInit(): void {}\n\n  onClick(): void {\n    const canvas = new Canvas(this.size.width, this.size.width);\n    const img = canvas.load(this.img, this.mtx, 0.9);\n\n    const edited = new Blob([img], { type: 'application/octet-stream' });\n\n    this.progress.mode = 'indeterminate';\n\n    const url =\n      'images' +\n      (this.data.value !== undefined ? '/' + this.data.value.name : '');\n\n    const formData = new FormData();\n    /*\n    for (const paramName in params) {\n      formData.append(imgCanvas[],img);\n    }\n    */\n    formData.append('orig', this.file);\n    formData.append('edited', edited);\n\n    this.httpService.upload(url, formData).subscribe({\n      next: (event) => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.progress.mode = 'determine';\n          this.progress.value = Math.round(100 * (event.loaded / event.total));\n        } else if (event.type === HttpEventType.Response) {\n          if (event.status === 201 || event.status === 200) {\n            this.dialogRef.close({\n              id: event.body['name'],\n              idx: this.data.idx,\n              mtx: this.mtx,\n            });\n          }\n        }\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n\n  selectFile(e?) {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      this.data.src = reader.result as string;\n    };\n    if (e.target.files[0]) {\n      this.file = e.target.files[0];\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  rotate(value) {\n    this.eventBusService.rotate.emit({ degree: value });\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-dialog-img\">\n  <ms-editor *ngIf=\"data\" [data]=\"data\" (changed)=\"onChange($event)\"></ms-editor>\n</div>\n<div mat-dialog-actions align=\"center\">\n  <button mat-icon-button (click)=\"rotate(-90)\">\n    <mat-icon>rotate_left</mat-icon>\n  </button>\n  <button mat-icon-button (click)=\"fileInput.click()\">\n    <mat-icon>image_search</mat-icon>\n  </button>\n  <input type=\"file\" #fileInput class=\"file_button\" (change)=\"selectFile($event)\"/>\n  <button mat-icon-button (click)=\"rotate(90)\">\n    <mat-icon>rotate_right</mat-icon>\n  </button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-event',\n  templateUrl: './event.component.html',\n})\nexport class EventComponent implements OnInit {\n  constructor(public dialogRef: MatDialogRef<EventComponent>) {}\n\n  ngOnInit(): void {}\n\n  onClick(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  Event\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\n\ninterface Option {\n  value: string;\n  viewValue: string;\n}\n@Component({\n  selector: 'app-event-filter',\n  templateUrl: './event-filter.component.html',\n})\nexport class EventFilterComponent implements OnInit {\n  formGroup: FormGroup;\n\n  categories: any;\n  currencies: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<EventFilterComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dataService: DataService\n  ) {\n    this.categories = this.dataService.eventCategories;\n    this.currencies = this.dataService.currencies;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      category: [''],\n      city: [''],\n      free: [''],\n      /*amount: this.fb.group({\n        from: [\"\", [Validators.required, Validators.pattern(\"^[0-9]*$\")]],\n        to: [\"\", [Validators.required, Validators.pattern(\"^[0-9]*$\")]],\n        currency: [\"\", Validators.required]\n      }),*/\n    });\n  }\n\n  onClick(): void {\n    let raw;\n\n    if (this.formGroup.valid) {\n      raw = this.formGroup.getRawValue();\n    }\n    this.dialogRef.close(raw);\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-form-field>\n      <mat-label>Category</mat-label>\n      <mat-select formControlName=\"category\">\n        <mat-option\n          *ngFor=\"let category of categories\"\n          [value]=\"category.value\"\n        >\n          {{ category.viewValue }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>City</mat-label>\n      <input matInput formControlName=\"city\" />\n      <mat-error *ngIf=\"formGroup.controls['city'].invalid\"\n        >City is required!</mat-error\n      >\n    </mat-form-field>\n    <mat-slide-toggle labelPosition=\"before\" #paid formControlName=\"free\">{{\n      paid.checked ? 'Paid' : 'Free'\n    }}</mat-slide-toggle>\n    <!--<fieldset *ngIf=\"paid.checked\" formGroupName=\"amount\">\n    <legend>Amount</legend>\n    <mat-form-field>\n      <mat-label>From</mat-label>\n      <input matInput formControlName=\"from\" type=\"number\"/>\n      <mat-error *ngIf=\"formGroup.controls.amount.controls['from'].invalid\"\n        >Number is required!</mat-error\n      >\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>To</mat-label>\n      <input matInput formControlName=\"to\" type=\"number\"/>\n      <mat-error *ngIf=\"formGroup.controls.amount.controls['to'].invalid\"\n        >Number is required!</mat-error\n      >\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Currency</mat-label>\n      <mat-select formControlName=\"currency\">\n        <mat-option\n          *ngFor=\"let currency of currencies\"\n          [value]=\"currency.value\"\n        >\n          {{ currency.viewValue }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </fieldset>-->\n  </form>\n</div>\n","export * from './basket/basket.component';\nexport * from './editor/editor.component';\nexport * from './event/event.component';\nexport * from './panel/panel.component';\nexport * from './qrcode/qrcode.component';\nexport * from './reward/reward.component';\nexport * from './help/help.component';\nexport * from './forms';\n","import { Component, Inject, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\nimport { HttpService } from 'src/app/services/http.service';\n\nconst DESC_MIN = 10;\nconst DESC_MAX = 160;\n\n@Component({\n  selector: 'app-event',\n  templateUrl: './event.component.html',\n})\nexport class EventFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  categories: any;\n  currencies: any;\n  types: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  isAdd: any;\n\n  isPriority = true;\n\n  isMain = true;\n\n  category = 'l';\n\n  // main event flag - only one main event does exist, which contains assign car and signal chat group\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<EventFormComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dataService: DataService,\n    private httpService: HttpService\n  ) {\n    this.categories = this.dataService.eventCategories;\n    this.currencies = this.dataService.currencies;\n\n    if (data.extra !== undefined) {\n      if (data.extra.main !== undefined) {\n        this.isMain = data.isAdd ? false : data.extra.main;\n      }\n\n      if (data.extra.category !== undefined) {\n        this.category = data.extra.category;\n      }\n    }\n\n    if (data.url.indexOf('items') === -1) {\n      this.types = this.dataService.eventTypes.filter((obj) => {\n        return obj.value === 'g';\n      });\n    } else {\n      this.types = this.dataService.eventTypes;\n    }\n\n    if (data.url.indexOf('promotions') !== -1) {\n      this.isPriority = false;\n    }\n\n    this.data = data.value ? data.value : { type: 'g', amount: {} };\n    this.url = data.url;\n  }\n\n  validatorsForChatKey(type) {\n    const validators = new Array();\n    if (type === 'g') {\n      validators.push(Validators.required);\n    }\n\n    validators.push(\n      Validators.pattern(\n        '^https?://(www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@,!:%_+.~#?&//=]*)$'\n      )\n    );\n    return validators;\n  }\n\n  // if random, then you can set activity profile date from and you rated greater than\n  ngOnInit(): void {\n    const chatKeyValidators = new Array();\n\n    chatKeyValidators.push(\n      Validators.pattern(\n        '^https?://(www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@,!:%_+.~#?&//=]*)$'\n      )\n    );\n\n    const chatUrlValidators = this.validatorsForChatKey(this.data.type);\n\n    const offset = new Date().getTimezoneOffset() * 60000;\n    const dateFrom = new Date(Date.now() - offset);\n    const isoDateFrom = dateFrom.toISOString().substring(0, 16);\n    dateFrom.setMinutes(dateFrom.getMinutes() + 1);\n    const isoDateTo = dateFrom.toISOString().substring(0, 16);\n\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        type: [this.data.type, Validators.required],\n        optional: [\n          this.data.optional ? this.data.optional : false,\n          Validators.required,\n        ],\n        ticket: [\n          this.data.ticket ? this.data.ticket : false,\n          Validators.required,\n        ],\n        chatKey: [this.data.chatKey, [...chatUrlValidators]],\n        category: [\n          {\n            value:\n              this.category !== undefined ? this.category : this.data.category,\n            disabled: !this.isMain,\n          },\n          Validators.required,\n        ],\n        position: [\n          this.data.position !== undefined\n            ? this.data.position.x + ', ' + this.data.position.y\n            : '',\n          Validators.required,\n        ],\n        name: [this.data.name, Validators.required],\n        urlRef: [this.data.urlRef, [...chatKeyValidators]], // google\n        range: this.fb.group(\n          {\n            start: [\n              this.data.range\n                ? this.data.range.start.substring(0, 16)\n                : isoDateFrom,\n              Validators.required,\n            ],\n            end: [\n              this.data.range\n                ? this.data.range.end.substring(0, 16)\n                : isoDateFrom,\n              Validators.required,\n            ],\n          },\n          { validator: DateTimeRangeValidator }\n        ),\n        capacity: this.fb.group(\n          {\n            min: [\n              this.data.capacity ? this.data.capacity.min : 0,\n              Validators.required,\n            ],\n            max: [\n              this.data.capacity ? this.data.capacity.max : 0,\n              Validators.required,\n            ],\n          },\n          { validator: RangeValidator }\n        ),\n        desc: [\n          this.data.desc !== undefined ? this.data.desc : '',\n          [\n            Validators.required,\n            Validators.minLength(DESC_MIN),\n            Validators.maxLength(DESC_MAX),\n          ],\n        ],\n        telNum: [\n          this.data.telNum,\n          this.data.type === 'c' ? Validators.required : undefined,\n        ],\n        priority: [\n          this.data.priority ? this.data.priority : false,\n          Validators.required,\n        ],\n      }),\n      rule: this.fb.group({\n        balanced: [\n          this.data.rule && this.data.rule.balanced\n            ? this.data.rule.balanced\n            : false,\n          Validators.required,\n        ],\n        met: [\n          this.data.rule && this.data.rule.met ? this.data.rule.met : false,\n          Validators.required,\n        ],\n        rate: [\n          this.data.rule && this.data.rule.rate ? this.data.rule.rate : 0,\n          [Validators.required, Validators.pattern('^[0-9]+$')],\n        ],\n        range: this.fb.group(\n          {\n            start: [\n              this.data.rule && this.data.rule.range\n                ? this.data.rule.range.start\n                : undefined,\n            ],\n            end: [\n              this.data.rule && this.data.rule.range\n                ? this.data.rule.range.end\n                : undefined,\n            ],\n          },\n          { validator: DateTimeRangeValidator }\n        ),\n      }),\n      expense: this.fb.group({\n        amount: this.fb.group({\n          value: [\n            this.data.amount.value,\n            [\n              Validators.required,\n              Validators.pattern('^[0-9]+[\\\\.]?[0-9]{0,}$'),\n            ],\n          ],\n          currency: [this.data.amount.currency, Validators.required],\n        }),\n      }),\n    });\n  }\n\n  onTypeChange(event) {\n    (this.formGroup.controls['data'] as FormGroup).controls[\n      'chatKey'\n    ].clearValidators();\n\n    const chatUrlValidators = this.validatorsForChatKey(event.value);\n    (this.formGroup.controls['data'] as FormGroup).controls[\n      'chatKey'\n    ].setValidators([...chatUrlValidators]);\n\n    (this.formGroup.controls['data'] as FormGroup).controls[\n      'chatKey'\n    ].updateValueAndValidity();\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      const raw = this.formGroup.getRawValue();\n      raw.data.amount = raw.expense.amount;\n      raw.data.rule = raw.rule;\n      raw.data.key = this.data.key;\n\n      raw.data.position = raw.data.position\n        .split(',')\n        .map((item) => item.trim());\n\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          console.log(value);\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n\nconst RangeValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const min = control.get('min').value;\n  const max = control.get('max').value;\n\n  return min <= max ? null : { range: true };\n};\n\nconst DateTimeRangeValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const startS = control.get('start').value;\n  const endS = control.get('end').value;\n\n  let start;\n  if (startS !== null) {\n    start = new Date(startS);\n  }\n\n  let end;\n  if (endS !== null) {\n    end = new Date(endS);\n  }\n\n  return start === undefined || end === undefined || start < end\n    ? null\n    : { range: true };\n};\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Info</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Type</mat-label>\n          <mat-select\n            [formControlName]=\"'type'\"\n            (selectionChange)=\"onTypeChange($event)\"\n          >\n            <mat-option *ngFor=\"let type of types\" [value]=\"type.value\">\n              {{ type.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Enter name</mat-label>\n          <input matInput [formControlName]=\"'name'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('name').invalid\"\n            >Name is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field\n          *ngIf=\"formGroup.controls.data.get('type').value === 'g'\"\n        >\n          <mat-label>Enter Chat Url</mat-label>\n          <input matInput [formControlName]=\"'chatKey'\" type=\"url\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('chatKey').invalid\"\n            >Chat url is required!</mat-error\n          >\n        </mat-form-field>\n        <fieldset>\n          <legend>Location</legend>\n          <mat-form-field>\n            <mat-label>Category</mat-label>\n            <mat-select [formControlName]=\"'category'\">\n              <mat-option\n                *ngFor=\"let category of categories\"\n                [value]=\"category.value\"\n              >\n                {{ category.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Enter Location (latitude,longitude)</mat-label>\n            <div class=\"btn_form_bar\">\n              <div class=\"btn_form\">\n                <div class=\"map container\">\n                  <a href=\"https://maps.google.com\" target=\"_blank\">\n                    <img class=\"img\" />\n                  </a>\n                </div>\n              </div>\n            </div>\n            <input matInput [formControlName]=\"'position'\" />\n            <mat-error *ngIf=\"formGroup.controls.data.get('position').invalid\"\n              >Position is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Reference link (Google, Booking etc.)</mat-label>\n            <input matInput [formControlName]=\"'urlRef'\" />\n            <mat-error *ngIf=\"formGroup.controls.data.get('urlRef').invalid\"\n              >Address is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n        <fieldset formGroupName=\"range\">\n          <legend>Time</legend>\n          <mat-form-field>\n            <mat-label>From</mat-label>\n            <input matInput formControlName=\"start\" type=\"datetime-local\" />\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>To</mat-label>\n            <input matInput formControlName=\"end\" type=\"datetime-local\" />\n          </mat-form-field>\n          <mat-error *ngIf=\"formGroup.controls.data.get('range').invalid\"\n            >Invalid Range</mat-error\n          >\n        </fieldset>\n        <mat-slide-toggle\n        *ngIf=\"!isMain\"\n        [formControlName]=\"'optional'\"\n        labelPosition=\"before\"\n        >Optional</mat-slide-toggle\n      >\n      <fieldset formGroupName=\"capacity\" *ngIf=\"isMain || formGroup.controls.data.get('optional').value\">\n          <legend>Capacity</legend>\n          <mat-form-field>\n            <mat-label>Min</mat-label>\n            <input matInput formControlName=\"min\" type=\"number\" />\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Max</mat-label>\n            <input matInput formControlName=\"max\" type=\"number\" />\n          </mat-form-field>\n          <mat-error *ngIf=\"formGroup.controls.data.get('capacity').invalid\"\n            >Invalid Range</mat-error\n          >\n        </fieldset>\n        <fieldset>\n          <legend>Description (min. 10, max. 160)</legend>\n          <div legend-right>\n            {{ formGroup.controls.data.get('desc').value.length }}\n          </div>\n          <mat-form-field>\n            <textarea\n              matInput\n              [formControlName]=\"'desc'\"\n              rows=\"5\"\n              maxlength=\"160\"\n            ></textarea>\n            <mat-error *ngIf=\"formGroup.controls.data.get('desc').invalid\"\n              >Description is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n        <mat-form-field\n          *ngIf=\"\n            formGroup.controls.data.get('type').value === 'c' ||\n            formGroup.controls.data.get('type').value === 'g'\n          \"\n        >\n          <mat-label>Enter Telephone Number</mat-label>\n          <input matInput [formControlName]=\"'telNum'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('telNum').invalid\"\n            >Telephone Number is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-slide-toggle [formControlName]=\"'ticket'\" labelPosition=\"before\"\n          >Ticket</mat-slide-toggle\n        >\n        <mat-slide-toggle *ngIf=\"isPriority && isMain\" [formControlName]=\"'priority'\" labelPosition=\"before\"\n          >Priority</mat-slide-toggle\n        >\n      </mat-expansion-panel>\n      <mat-expansion-panel\n        formGroupName=\"rule\"\n        *ngIf=\"formGroup.controls.data.get('priority').value\"\n      >\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.rule.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Rule</mat-panel-title>\n        </mat-expansion-panel-header>\n        <div>\n          <mat-slide-toggle\n            [formControlName]=\"'balanced'\"\n            labelPosition=\"before\"\n            >Balanced Female/Male Ratio</mat-slide-toggle\n          >\n          <mat-form-field>\n            <mat-label>Rate From</mat-label>\n            <input matInput [formControlName]=\"'rate'\" />\n            <mat-error *ngIf=\"formGroup.controls.rule.get('rate').invalid\"\n              >Value is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-slide-toggle [formControlName]=\"'met'\" labelPosition=\"before\"\n            >Has already met</mat-slide-toggle\n          >\n          <fieldset formGroupName=\"range\">\n            <legend>Time</legend>\n            <mat-form-field>\n              <mat-label>Date After</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"pickerStart\"\n                formControlName=\"start\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"pickerStart\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #pickerStart></mat-datepicker>\n            </mat-form-field>\n            <mat-form-field>\n              <mat-label>Date Before</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"pickerEnd\"\n                formControlName=\"end\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"pickerEnd\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #pickerEnd></mat-datepicker>\n            </mat-form-field>\n            <mat-error *ngIf=\"formGroup.controls.rule.get('range').invalid\"\n              >Invalid Range</mat-error\n            >\n          </fieldset>\n        </div>\n      </mat-expansion-panel>\n      <mat-expansion-panel formGroupName=\"expense\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.expense.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Expense</mat-panel-title>\n        </mat-expansion-panel-header>\n        <fieldset formGroupName=\"amount\">\n          <legend>Amount</legend>\n          <mat-form-field>\n            <mat-label>eg. 12.34</mat-label>\n            <input matInput [formControlName]=\"'value'\" />\n            <mat-error\n              *ngIf=\"\n                formGroup.controls.expense.get('amount').get('value').invalid\n              \"\n              >Value is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Currency</mat-label>\n            <mat-select [formControlName]=\"'currency'\">\n              <mat-option\n                *ngFor=\"let currency of currencies\"\n                [value]=\"currency.value\"\n              >\n                {{ currency.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </fieldset>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import {\n  Component,\n  ElementRef,\n  Inject,\n  OnInit,\n  ViewChild\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA\n} from '@angular/material/dialog';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from 'src/app/services/data.service';\nimport { NavigationService } from 'src/app/navigation.service';\nimport { EditorComponent } from '../../editor/editor.component';\n\nconst AUDIO_LENGTH = 10000;\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n})\nexport class ProfileComponent implements OnInit {\n  formGroup: FormGroup;\n\n  professions: any;\n  physiques: any;\n  religions: any;\n  languages: any;\n  statuses: any;\n\n  images: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  private url: any;\n\n  private pos: any;\n\n  isPlay = false;\n  isRecord = false;\n  voiceData;\n  interval;\n\n  recordPos = 0;\n  playPos = 0;\n  playLimit = AUDIO_LENGTH;\n\n  voiceUrl: any;\n\n  @ViewChild('voiceObj', { static: true }) voiceObj: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<ProfileComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private navService: NavigationService,\n    private httpService: HttpService,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.professions = this.dataService.professions;\n    this.languages = this.dataService.languages;\n    this.statuses = this.dataService.statuses;\n\n    this.data = data.value['profile'];\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        firstName: [this.data.firstName, Validators.required],\n        gender: [this.data.gender],\n        languages: [[...this.data.languages]],\n        profession: [this.data.profession],\n        status: [this.data.status !== undefined ? this.data.status : 'I'],\n      }),\n      images: [\n        [...this.data.images],\n        [Validators.required, Validators.minLength(1)],\n      ],\n      voice: [this.data.voice],\n    });\n\n    this.images = (this.data.images as Array<string>).map(\n      (image) =>\n        location.origin + '/backend' + this.url + '/images/' + image['name']\n    );\n\n    this.voiceUrl = location.origin + '/backend' + this.url + '/voice/' + this.data.voice;\n  }\n\n  onHeight(evt): void {\n    this.data.height = evt.value;\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  noCache(img) {\n    return img + '?' + Date.now();\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(EditorComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        idx,\n        src:\n          this.images[idx] !== undefined\n            ? this.images[idx].split('?')[0] + '_orig'\n            : this.images[idx],\n        value: this.formGroup.controls['images'].value[idx],\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        const images = this.formGroup.controls['images'].value;\n        images[result.idx] = { name: result.id, mtx: result.mtx };\n        this.formGroup.controls['images'].setValue(images);\n        this.data.images[result.idx] = images[result.idx];\n\n        this.images = (this.data.images as Array<string>).map(\n          (image) =>\n            location.origin +\n            '/backend' +\n            this.url +\n            '/images/' +\n            image['name'] +\n            '?' +\n            Date.now()\n        );\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      raw.data.position = this.navService.pos;\n      raw.data.images = raw.images;\n\n      const formData = new FormData();\n\n      const profile = new Blob([JSON.stringify(raw.data)], {\n        type: 'application/json',\n      });\n      formData.append('profile', profile);\n\n      if (this.voiceData !== undefined) {\n        formData.append('voice', this.voiceData);\n      }\n\n      this.httpService.save(this.url, formData).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    // stale value !!!\n    this.dialogRef.close();\n  }\n\n  record(): void {\n    if (this.isRecord) {\n      return;\n    }\n    // check/request permission on android\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        const chunks = [];\n        /*var options = {\n              audioBitsPerSecond : 128000,\n              videoBitsPerSecond : 2500000,\n              mimeType : 'video/mp4'\n              }*/\n        const recorder = new MediaRecorder(stream /*,options*/);\n\n        recorder.ondataavailable = (e) => {\n          chunks.push(e.data);\n\n          if (recorder.state === 'inactive') {\n            // ;codecs=h264 can be used to be able to play on ios\n            const blob = new Blob(chunks, { type: 'audio/webm' });\n            this.voiceData = blob;\n            this.voiceUrl = this.domSanitizer.bypassSecurityTrustUrl(\n              URL.createObjectURL(blob)\n            );\n          }\n        };\n\n        recorder.start();\n        this.isRecord = true;\n\n        this.interval = setInterval(() => {\n          this.recordPos++;\n        }, 500);\n\n        setTimeout(() => {\n          setTimeout(() => {\n            this.recordPos = 0;\n            this.isRecord = false;\n          }, 500);\n\n          clearInterval(this.interval);\n          recorder.stop();\n        }, AUDIO_LENGTH);\n      })\n      .catch(console.error);\n  }\n\n  play(): void {\n    if (this.voiceObj === undefined || this.isPlay) {\n      return;\n    }\n\n    this.isPlay = true;\n\n    this.voiceObj.nativeElement['load']();\n\n    const method = this.isPlay ? 'play' : 'pause';\n    this.voiceObj.nativeElement[method]();\n  }\n\n  updateTime(evt): void {\n    this.playPos = this.voiceObj.nativeElement.currentTime * 1000;\n  }\n\n  ended(evt): void {\n    this.isPlay = false;\n    this.playPos = 0;\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Personal data</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Status</mat-label>\n          <mat-select [formControlName]=\"'status'\">\n            <mat-option *ngFor=\"let status of statuses\" [value]=\"status.value\">\n              {{ status.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Enter your first name</mat-label>\n          <input matInput [formControlName]=\"'firstName'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('firstName').invalid\"\n            >First name is required!</mat-error\n          >\n        </mat-form-field>\n        <fieldset>\n          <legend>Gender</legend>\n          <mat-radio-group [formControlName]=\"'gender'\">\n            <mat-radio-button value=\"m\">Man</mat-radio-button>\n            <mat-radio-button value=\"w\">Woman</mat-radio-button>\n          </mat-radio-group>\n        </fieldset>\n        <mat-form-field>\n          <mat-label>Languages</mat-label>\n          <mat-select [formControlName]=\"'languages'\" multiple>\n            <mat-option\n              *ngFor=\"let language of languages\"\n              [value]=\"language.value\"\n              >{{ language.viewValue }}</mat-option\n            >\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Profession</mat-label>\n          <mat-select [formControlName]=\"'profession'\">\n            <mat-option\n              *ngFor=\"let profession of professions\"\n              [value]=\"profession.value\"\n              >{{ profession.viewValue }}</mat-option\n            >\n          </mat-select>\n        </mat-form-field>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.images.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Images</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <mat-card\n          matRipple\n          default\n          *ngFor=\"let n of numSequence(1); let i = index\"\n          (click)=\"openDialog(i)\"\n        >\n          <img *ngIf=\"images.length > i\" mat-card-image [src]=\"images[i]\" />\n        </mat-card>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.voice.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Voice</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <fieldset class=\"voice\">\n          <legend>Voice</legend>\n          <div\n            mat-button\n            matRipple\n            (click)=\"record()\"\n            style=\"margin-left: auto; border-radius: 50%\"\n          >\n            <svg\n              [style]=\"\n                '--pos:' + recordPos + ';--buff:0;--limit: 10;width:30px;'\n              \"\n              class=\"chart\"\n              viewBox=\"0 0 24 24\"\n            >\n              <g transform=\"rotate(-90 12 12)\">\n                <circle class=\"pos\" r=\"10\" cy=\"12\" cx=\"12\" />\n                <circle class=\"buff\" r=\"10\" cy=\"12\" cx=\"12\" />\n              </g>\n            </svg>\n            <mat-icon\n              mat-rate\n              [ngStyle]=\"{ color: !isPlay ? 'black' : 'gray' }\"\n              >{{ isRecord ? 'stop' : 'mic' }}</mat-icon\n            >\n          </div>\n          <div\n            mat-button\n            matRipple\n            (click)=\"play()\"\n            style=\"margin-right: auto; border-radius: 50%\"\n          >\n            <svg\n              [style]=\"\n                '--pos:' +\n                playPos +\n                ';--buff:0;--limit:' +\n                playLimit +\n                ';width:30px;'\n              \"\n              class=\"chart\"\n              viewBox=\"0 0 24 24\"\n            >\n              <g transform=\"rotate(-90 12 12)\">\n                <circle class=\"pos\" r=\"10\" cy=\"12\" cx=\"12\" />\n                <circle class=\"buff\" r=\"10\" cy=\"12\" cx=\"12\" />\n              </g>\n            </svg>\n            <mat-icon\n              mat-rate\n              [ngStyle]=\"{ color: !isRecord ? 'black' : 'gray' }\"\n              >{{ isPlay ? 'stop' : 'play_arrow' }}</mat-icon\n            >\n          </div>\n          <audio\n            #voiceObj\n            preload=\"none\"\n            (timeupdate)=\"updateTime($event)\"\n            (ended)=\"ended($event)\"\n          >\n            <source [src]=\"voiceUrl\" type=\"audio/ogg\" />\n          </audio>\n        </fieldset>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MsList } from 'src/lib';\nimport {\n  BasketComponent,\n  CarFormComponent,\n  EventFilterComponent,\n  EventFormComponent,\n  FeedbackFormComponent,\n  PanelComponent,\n  ProfileComponent,\n  QrcodeComponent,\n  SchoolComponent,\n  SettingComponent,\n  RewardComponent,\n  PromotionFilterComponent,\n} from './components';\n\n// filter, add, attach\nconst routes: Routes = [\n  { path: '', redirectTo: 'activity', pathMatch: 'full' },\n  {\n    path: 'activity',\n    data: {\n      reuse: true,\n      icon: 'notifications',\n    },\n    children: [\n      { path: '', redirectTo: 'events', pathMatch: 'full' },\n      {\n        path: 'events',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'insert_invitation',\n          actions: [\n            {\n              component: EventFormComponent,\n              type: 'add',\n              icon: 'add',\n            },\n            {\n              // component: EventFormComponent,\n              component: QrcodeComponent,\n              type: 'verify',\n            },\n            {\n              // component: EventFormComponent,\n              component: QrcodeComponent,\n              type: 'code',\n            },\n            {\n              component: EventFormComponent,\n              type: 'edit',\n            },\n          ],\n          multiple: true,\n          event: true, //temporary\n          animation: 'One',\n          group: 'date',\n        },\n      },\n      {\n        path: 'events/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'list',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n                {\n                  component: EventFormComponent,\n                  type: 'edit',\n                },\n              ],\n              event: true, //temporary\n              animation: 'One1',\n            },\n          },\n          {\n            path: 'items/:id',\n            data: {\n              icon: 'insert_invitation',\n              dialog: true,\n            },\n            children: [\n              { path: '', redirectTo: 'members', pathMatch: 'full' },\n              {\n                path: 'members',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  animation: 'Two1',\n                },\n              },\n            ],\n          },\n          {\n            path: 'members',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'groups',\n              animation: 'One',\n              actions: [\n                {\n                  component: BasketComponent,\n                  type: 'add',\n                  icon: 'add',\n                  multiple: true,\n                  // only profiles - members url part will be replaced by profiles\n                  url: '/games/rate_met', // backend call - not rate_met, filter out already added members\n                },\n              ],\n            },\n            children: [\n              { path: '', redirectTo: 'schools', pathMatch: 'full' },\n              {\n                path: 'schools',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  animation: 'One1',\n                },\n              },\n            ],\n          },\n          {\n            path: 'feedbacks',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'feedback_ext',\n              actions: [\n                {\n                  component: FeedbackFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n                {\n                  component: FeedbackFormComponent,\n                  type: 'edit',\n                },\n              ],\n            },\n          },\n        ],\n      },\n      {\n        path: 'invitations',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'mail',\n          event: true, //temporary\n          animation: 'Two',\n        },\n      },\n      {\n        path: 'invitations/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'list',\n              event: true, //temporary\n              animation: 'Two1',\n            },\n          },\n\n          {\n            path: 'members',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'groups',\n              actions: [],\n            },\n          },\n          {\n            path: 'feedbacks',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'feedback_ext',\n            },\n          },\n        ],\n      },\n      {\n        path: 'promotions',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'campaign',\n        },\n      },\n      {\n        path: 'promotions/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              event: true, //temporary\n              animation: 'One1',\n            },\n          },\n        ],\n      },\n    ],\n  },\n  {\n    path: 'recommendations',\n    data: {\n      reuse: true,\n      icon: 'explore',\n      animation: 'Three',\n    },\n    children: [\n      { path: '', redirectTo: 'events', pathMatch: 'full' },\n      {\n        path: 'events',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'local_activity',\n          event: true, //temporary\n          animation: 'Three1',\n        },\n      },\n      {\n        path: 'events/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'list',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n              ],\n              event: true, //temporary\n              animation: 'Three2',\n            },\n          },\n          {\n            path: 'feedbacks',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'feedback_ext',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n              ],\n            },\n          },\n        ],\n      },\n      {\n        path: 'promotions',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'campaign',\n          /*actions: [\n            {\n              component: PromotionFilterComponent,\n              type: 'filter',\n              icon: 'search',\n            },\n          ],*/\n        },\n      },\n      {\n        path: 'promotions/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'events', pathMatch: 'full' },\n          {\n            path: 'events',\n            component: MsList,\n            data: {\n              reuse: true,\n              event: true, //temporary\n              animation: 'One1',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'clone',\n                },\n              ],\n            },\n          },\n          {\n            path: 'events/:id',\n            data: {\n              icon: 'insert_invitation',\n              dialog: true,\n            },\n            children: [\n              { path: '', redirectTo: 'items', pathMatch: 'full' },\n              {\n                path: 'items',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  icon: 'list',\n                  event: true, //temporary\n                  animation: 'One1',\n                },\n              },\n              {\n                path: 'feedbacks',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  icon: 'feedback_ext',\n                },\n              },\n            ],\n          },\n        ],\n      },\n      {\n        path: 'groups',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'groups',\n          actions: [\n            {\n              type: 'join',\n            },\n          ],\n        },\n      },\n    ],\n  },\n  {\n    path: 'games',\n    data: {\n      reuse: true,\n      icon: 'favorite',\n    },\n    children: [\n      { path: '', redirectTo: 'rate_none', pathMatch: 'full' },\n      {\n        path: 'rate_none',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'rate_ext_new',\n          double: true,\n          group: 'dist',\n          animation: 'One',\n        },\n      },\n      {\n        path: 'rate_none/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'schools', pathMatch: 'full' },\n          {\n            path: 'schools',\n            component: MsList,\n            data: {\n              reuse: true,\n              animation: 'One1',\n            },\n          },\n        ],\n      },\n      {\n        path: 'rate_double/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'none', pathMatch: 'full' },\n          {\n            path: 'none',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'screen_share',\n              animation: 'Four',\n            },\n          },\n          {\n            path: 'none/:id',\n            data: {\n              icon: 'insert_invitation',\n              dialog: true,\n            },\n            children: [\n              { path: '', redirectTo: 'schools', pathMatch: 'full' },\n              {\n                path: 'schools',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  animation: 'One1',\n                },\n              },\n            ],\n          },\n          {\n            path: 'rated',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'rate_ext',\n            },\n          },\n          {\n            path: 'rated/:id',\n            data: {\n              icon: 'insert_invitation',\n              dialog: true,\n            },\n            children: [\n              { path: '', redirectTo: 'schools', pathMatch: 'full' },\n              {\n                path: 'schools',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  animation: 'One1',\n                },\n              },\n            ],\n          },\n        ],\n      },\n      {\n        path: 'rate_give',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'rate_ext_give',\n          double: true,\n        },\n      },\n      {\n        path: 'rate_give/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'schools', pathMatch: 'full' },\n          {\n            path: 'schools',\n            component: MsList,\n            data: {\n              reuse: true,\n              animation: 'One1',\n            },\n          },\n        ],\n      },\n      {\n        path: 'rate_receive',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'rate_ext_receive',\n          double: true,\n        },\n      },\n      {\n        path: 'rate_receive/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'schools', pathMatch: 'full' },\n          {\n            path: 'schools',\n            component: MsList,\n            data: {\n              reuse: true,\n              animation: 'One1',\n            },\n          },\n        ],\n      },\n      {\n        path: 'rate_both',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'rate_ext_both',\n          double: true,\n        },\n      },\n      {\n        path: 'rate_both/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'schools', pathMatch: 'full' },\n          {\n            path: 'schools',\n            component: MsList,\n            data: {\n              reuse: true,\n              animation: 'One1',\n            },\n          },\n        ],\n      },\n      {\n        path: 'rate_met',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'history',\n          double: true,\n        },\n        // filter button - hasonlosag vagy lokalizacio (ez ugyanaz amikor a resztvevoket valasztja ki egy esemenyhez)\n        // basket component filter button\n      },\n      // ?state=active,pending,none\n      {\n        path: 'rate_met/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'schools', pathMatch: 'full' },\n          {\n            path: 'schools',\n            component: MsList,\n            data: {\n              reuse: true,\n              animation: 'One1',\n            },\n          },\n        ],\n      },\n    ],\n  },\n  {\n    path: 'user',\n    data: {\n      reuse: true,\n      icon: 'person',\n      //type: 'P',\n    },\n    children: [\n      { path: '', redirectTo: 'profile', pathMatch: 'full' },\n      {\n        path: 'profile',\n        component: PanelComponent,\n        data: {\n          reuse: true,\n          icon: 'profile_ext',\n          actions: [\n            {\n              component: RewardComponent,\n              type: 'share',\n              icon: 'send',\n            },\n            {\n              component: RewardComponent,\n              type: 'reward',\n              icon: 'military_tech',\n            },\n            {\n              component: SettingComponent,\n              type: 'logout',\n              icon: 'logout',\n              color: 'warn',\n            },\n            { component: ProfileComponent, type: 'edit', icon: 'edit' },\n          ],\n        },\n      },\n      {\n        path: 'schools',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'school',\n          actions: [\n            {\n              component: SchoolComponent,\n              type: 'add',\n              icon: 'add',\n            },\n            {\n              component: SchoolComponent,\n              type: 'edit',\n            },\n          ],\n          event: true, //temporary\n        },\n      },\n      {\n        path: 'cars',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'car_ext',\n          actions: [\n            {\n              component: CarFormComponent,\n              type: 'add',\n              icon: 'add',\n            },\n            {\n              component: CarFormComponent,\n              type: 'edit',\n            },\n          ],\n          event: true, //temporary\n        },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class JobRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-help',\n  templateUrl: './help.component.html',\n})\nexport class HelpComponent {\n  constructor() {}\n}\n","Help\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from '../../../services/data.service';\n\n@Component({\n  selector: 'app-reward',\n  templateUrl: './reward.component.html',\n})\nexport class RewardComponent implements OnInit {\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  rewards: any;\n\n  constructor(\n    public dialogRef: MatDialogRef<RewardComponent>,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    const params = new HttpParams();\n\n    this.httpService.get(this.url + '/rewards', params).subscribe({\n      next: (result) => {\n        this.rewards = result;\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div>\n  <fieldset *ngFor=\"let reward of rewards\">\n    <legend>{{reward.name}}</legend>\n    <b>People invited:</b> {{reward.cnt}}\n  </fieldset>\n</div>\n"]}