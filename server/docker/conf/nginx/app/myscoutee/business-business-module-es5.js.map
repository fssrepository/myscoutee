{"version":3,"sources":["webpack:///src/app/business/components/panel/panel.component.ts","webpack:///src/app/business/components/panel/panel.component.html","webpack:///src/app/business/components/forms/setting/setting.component.ts","webpack:///src/app/business/components/forms/setting/setting.component.html","webpack:///src/app/business/components/forms/profile/profile.component.ts","webpack:///src/app/business/components/forms/profile/profile.component.html","webpack:///src/app/business/components/index.ts","webpack:///src/app/business/components/forms/campaign/campaign.component.ts","webpack:///src/app/business/components/forms/campaign/campaign.component.html","webpack:///src/app/business/business.module.ts","webpack:///src/app/business/components/forms/feedback/feedback.component.ts","webpack:///src/app/business/components/forms/feedback/feedback.component.html","webpack:///src/app/business/components/basket/basket.component.ts","webpack:///src/app/business/components/basket/basket.component.html","webpack:///src/app/business/components/qrcode/qrcode.component.ts","webpack:///src/app/business/components/qrcode/qrcode.component.html","webpack:///src/app/business/components/forms/group-filter/group-filter.component.ts","webpack:///src/app/business/components/forms/group-filter/group-filter.component.html","webpack:///src/app/business/components/forms/event-filter/event-filter.component.ts","webpack:///src/app/business/components/forms/event-filter/event-filter.component.html","webpack:///src/app/business/components/forms/event/event.component.ts","webpack:///src/app/business/components/forms/event/event.component.html","webpack:///src/app/business/components/editor/editor.component.ts","webpack:///src/app/business/components/editor/editor.component.html","webpack:///src/app/business/components/help/help.component.ts","webpack:///src/app/business/components/help/help.component.html","webpack:///src/app/business/components/forms/index.ts","webpack:///src/app/business/business-routing.module.ts","webpack:///src/app/business/components/forms/car/car.component.ts","webpack:///src/app/business/components/forms/car/car.component.html","webpack:///src/app/business/components/forms/profile-status/profile-status.component.ts","webpack:///src/app/business/components/forms/profile-status/profile-status.component.html","webpack:///src/app/business/components/event/event.component.ts","webpack:///src/app/business/components/event/event.component.html","webpack:///src/app/business/components/reward/reward.component.ts","webpack:///src/app/business/components/reward/reward.component.html","webpack:///src/app/business/components/forms/group/group.component.ts","webpack:///src/app/business/components/forms/group/group.component.html"],"names":["injector","create","providers","provide","deps","PanelComponent","cfr","activatedRoute","dialog","dataService","httpService","transformService","progress","mode","value","color","url","snapshot","itemUrl","substring","indexOf","get","subscribe","next","componentFactory","resolveComponentFactory","component","msg","status","transform","instance","onEnter","show","panelRef","insert","hostView","comp","error","complete","idx","actions","type","params","result","navigator","share","title","text","location","origin","key","then","console","log","alert","openDialog","dialogRef","open","maxWidth","maxHeight","height","width","data","afterClosed","undefined","sub","unsubscribe","v","SettingComponent","router","fb","navService","groups","init","evt","findIndex","group","selected","current","formGroup","required","item","push","viewValue","name","system","onSelect","openConfirmation","btn","save","valid","raw","getRawValue","formData","FormData","groupForm","Blob","JSON","stringify","append","groupType","groupTypes","groupName","notif","like","root","profile","navigate","close","auth","signOut","reset","back","AUDIO_LENGTH","DESC_MIN","DESC_MAX","ProfileComponent","domSanitizer","isPlay","isRecord","recordPos","playPos","playLimit","professions","physiques","religions","languages","statuses","urlValidator","pattern","firstName","website","desc","minLength","maxLength","images","voice","map","image","voiceUrl","n","Array","img","Date","now","src","split","controls","id","mtx","setValue","position","pos","voiceData","mediaDevices","getUserMedia","audio","stream","chunks","recorder","MediaRecorder","ondataavailable","e","state","blob","bypassSecurityTrustUrl","URL","createObjectURL","start","interval","setInterval","setTimeout","clearInterval","stop","voiceObj","nativeElement","method","currentTime","onClick","record","play","updateTime","ended","templateTypes","CampaignFormComponent","slotsNum","slots","types","parse","event","updatePanel","groupPanelRef","clear","templatePanelRef","offset","getTimezoneOffset","dateFrom","isoDateFrom","toISOString","setMinutes","getMinutes","isoDateTo","count","range","end","validator","DateTimeRangeValidator","initSlots","icon","info","tValue","capacity","addSlot","min","filter","pSlots","slot","createSlot","length","addControl","slotStartDate","getTime","opts","preventDefault","stopPropagation","i","removeAt","DateMinValidator","numOfItems","max","RangeValidator","onType","onTemplateSelect","onGroupType","onGroupSelect","control","toDateString","BusinessModule","FeedbackFormComponent","rate","onRate","BasketComponent","items","replace","keys","selectedIdx","overlayData","splice","onBasket","hasOwnProperty","onDelete","QrcodeComponent","camera","qrCode","post","code","on","onScanned","GroupFilterComponent","actionUrl","set","setting","EventFilterComponent","categories","eventCategories","currencies","category","city","free","EventFormComponent","isPriority","isMain","extra","main","isAdd","eventTypes","obj","amount","validators","chatKeyValidators","chatUrlValidators","validatorsForChatKey","optional","ticket","chatKey","disabled","x","y","urlRef","telNum","priority","rule","balanced","met","expense","currency","clearValidators","setValidators","updateValueAndValidity","trim","onTypeChange","startS","endS","EditorComponent","eventBusService","size","canvas","load","edited","file","upload","UploadProgress","Math","round","loaded","total","Response","body","reader","FileReader","onload","target","files","readAsDataURL","rotate","emit","degree","selectFile","HelpComponent","routes","path","redirectTo","pathMatch","reuse","children","multiple","animation","BusinessRoutingModule","forChild","CarFormComponent","regNum","make","model","year","ProfileStatusComponent","roles","profileStatuses","role","EventComponent","RewardComponent","rewards","GroupFormComponent","visibilities","groupVisibilities","visibility"],"mappings":"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","file":"business-business-module-es5.js","sourcesContent":["import { HttpParams } from '@angular/common/http';\nimport {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injector,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { HttpService } from 'src/app/services/http.service';\nimport { MsPanel } from 'src/lib';\nimport { DataService } from '../../../services/data.service';\nimport { TransformService } from '../../../services/transform.service';\n\nconst injector = Injector.create({\n  providers: [{ provide: MsPanel, deps: [] }],\n});\n\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n})\nexport class PanelComponent implements OnInit, OnDestroy {\n  @ViewChild('panel', { static: true, read: ViewContainerRef })\n  panelRef: ViewContainerRef;\n\n  private sub: Subscription;\n\n  actions: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  value: any;\n\n  private url: any;\n  private itemUrl: any;\n\n  private comp: ComponentRef<MsPanel>;\n\n  constructor(\n    private cfr: ComponentFactoryResolver,\n    private activatedRoute: ActivatedRoute,\n    public dialog: MatDialog,\n    public dataService: DataService,\n    private httpService: HttpService,\n    public transformService: TransformService\n  ) {\n    let url = this.activatedRoute['_routerState'].snapshot.url;\n    this.itemUrl = url;\n\n    url = url.substring(1);\n    this.url = url.substring(url.indexOf('/'));\n\n    this.progress.mode = 'indeterminate';\n\n    this.httpService.get(this.url).subscribe({\n      next: (value) => {\n        this.value = value;\n\n        const componentFactory = this.cfr.resolveComponentFactory(MsPanel);\n        const component = componentFactory.create(injector);\n\n        let msg;\n        if (this.value['profile'].status !== 'P') {\n          msg = this.transformService.transform(value, this.itemUrl);\n        }\n\n        component.instance.onEnter('', msg);\n\n        component.instance.show(true, true);\n        this.panelRef.insert(component.hostView);\n        this.comp = component;\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n\n  doAction(idx) {\n    switch (this.actions[idx].type) {\n      case 'share':\n        const params = new HttpParams();\n\n        this.httpService.get(this.url + '/share', params).subscribe({\n          next: (result) => {\n            if (navigator.share) {\n              navigator\n                .share({\n                  title: result['info'].title,\n                  text: result['info'].msg,\n                  url: location.origin + '?xlink=' + result['link'].key,\n                })\n                .then(() => {\n                  console.log('Thanks for sharing!');\n                })\n                .catch(console.error);\n            } else {\n              console.log({\n                title: result['info'].title,\n                text: result['info'].msg,\n                url: location.origin + '?xlink=' + result['link'].key,\n              });\n              alert('Not implemented for desktop!');\n            }\n          },\n          error: (error) => {\n            this.progress.mode = 'determine';\n            this.progress.color = 'warn';\n          },\n          complete: () => {\n            console.log('complete');\n          },\n        });\n        break;\n      default:\n        this.openDialog(idx);\n    }\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(this.actions[idx].component, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: { value: this.value, url: this.url },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      switch (this.actions[idx].type) {\n        case 'filter':\n          break;\n        case 'add':\n          break;\n        case 'attach':\n          break;\n        case 'logout':\n          break;\n        case 'edit':\n          if (result !== undefined) {\n            this.value = result;\n            this.comp.instance.onEnter(\n              '',\n              this.transformService.transform(result, this.itemUrl, false, true)\n            );\n            this.panelRef.insert(this.comp.hostView);\n          }\n          break;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.data.subscribe((v) => {\n      this.actions = v.actions;\n    });\n  }\n}\n","<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div class=\"big_panel\">\n  <ng-container #panel> </ng-container>\n</div>\n<div class=\"mat-fab-container\">\n  <button\n    *ngFor=\"let action of actions; let idx = index\"\n    mat-mini-fab\n    [color]=\"action.color ? action.color : 'primary'\"\n    (click)=\"doAction(idx)\"\n  >\n    <mat-icon>{{ action.icon }}</mat-icon>\n  </button>\n</div>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport firebase from 'firebase/app';\nimport { NavigationService } from 'src/app/navigation.service';\nimport { HttpService } from 'src/app/services/http.service';\nimport { environment } from 'src/environments/environment';\nimport { MsDialog } from 'src/lib';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './setting.component.html',\n})\nexport class SettingComponent implements OnInit {\n  progress: any = { mode: 'determine', value: 0, color: 'primary' };\n\n  url: any;\n\n  formGroup: FormGroup;\n\n  groups: any = [];\n\n  selected;\n\n  current;\n\n  constructor(\n    private router: Router,\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<SettingComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    private navService: NavigationService\n  ) {\n    this.url = '/user';\n  }\n\n  ngOnInit(): void {\n    const params = new HttpParams();\n\n    this.httpService.get(this.url, params).subscribe({\n      next: (data) => {\n        this.init(data);\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  onSelect(evt) {\n    const idx = this.groups.findIndex((group) => group.value === evt.value);\n    this.selected = this.groups[idx];\n  }\n\n  init(data) {\n    this.current = data['user'].group;\n\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        key: [data['user'].group, Validators.required],\n      }),\n    });\n\n    const groups = [];\n    for (const item of data['groups']) {\n      groups.push({\n        value: item.group.key,\n        viewValue: item.group.name,\n        system: item.group.system,\n      });\n    }\n    this.groups = groups;\n\n    this.onSelect({ value: data['user'].group });\n  }\n\n  leave() {\n    this.openConfirmation(\n      'Would you like to leave the ' + this.selected.viewValue + ' group!'\n    );\n  }\n\n  openConfirmation(msg) {\n    const dialogRef = this.dialog.open(MsDialog, {\n      data: {\n        msg,\n        btn: 'Yes',\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === true) {\n        const params = new HttpParams();\n\n        this.httpService\n          .save(this.url + '/groups/' + this.selected.value + '/leave', params)\n          .subscribe({\n            next: (data) => {\n              this.init(data);\n            },\n            error: (error) => {\n              this.progress.mode = 'determine';\n              this.progress.color = 'warn';\n            },\n            complete: () => {\n              console.log('complete');\n            },\n          });\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      const raw = this.formGroup.getRawValue();\n\n      const formData = new FormData();\n\n      const groupForm = new Blob([JSON.stringify(raw.data)], {\n        type: 'application/json',\n      });\n      formData.append('group', groupForm);\n\n      this.httpService.save(this.url, formData).subscribe({\n        next: (value) => {\n          const group = value['user'].group;\n          const groups = value['groups'];\n\n          let groupType;\n          for (const item of groups) {\n            if (item.group.key === group) {\n              groupType = environment.groupTypes[item.group.type];\n              this.navService.groupName = item.group.name[0];\n              break;\n            }\n          }\n\n          const notif = {};\n          for (const like of value['likes']) {\n            notif[groupType + '/' + like.root] = like.value;\n          }\n          this.navService.notif = notif;\n\n          if (\n            value['user'].profile === undefined ||\n            value['user'].profile.status === 'I'\n          ) {\n            this.router.navigate([groupType + '/user']);\n          } else {\n            this.router.navigate([groupType]);\n          }\n\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    // stale value !!!\n    this.dialogRef.close();\n  }\n\n  logout(): void {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        console.log('logout');\n        this.navService.reset.next();\n        this.back();\n      })\n      .catch((error) => {\n        // An error happened.\n      });\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>&nbsp;\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<form default *ngIf=\"formGroup\" [formGroup]=\"formGroup\">\n  <div formGroupName=\"data\">\n    <fieldset>\n      <legend>Group</legend>\n      <mat-form-field>\n        <mat-select [formControlName]=\"'key'\" (selectionChange)=\"onSelect($event)\">\n          <mat-option *ngFor=\"let group of groups\" [value]=\"group.value\">\n            {{ group.viewValue }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <button *ngIf=\"!selected.system\" mat-raised-button color=\"warn\" (click)=\"leave()\">\n        Leave\n      </button>\n      <button *ngIf=\"selected.value !== current\" mat-raised-button color=\"primary\" (click)=\"onClick()\">\n        Switch\n      </button>\n    </fieldset>\n    <div button-row>\n      <button mat-raised-button color=\"accent\" (click)=\"logout()\">\n        Logout\n      </button>\n    </div>\n  </div>\n</form>\n","import {\n  Component,\n  ElementRef,\n  Inject,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from 'src/app/services/data.service';\nimport { NavigationService } from 'src/app/navigation.service';\nimport { EditorComponent } from '../../editor/editor.component';\n\nconst AUDIO_LENGTH = 10000;\n\nconst DESC_MIN = 10;\nconst DESC_MAX = 160;\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n})\nexport class ProfileComponent implements OnInit {\n  formGroup: FormGroup;\n\n  professions: any;\n  physiques: any;\n  religions: any;\n  languages: any;\n  statuses: any;\n\n  images: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  private url: any;\n\n  private pos: any;\n\n  isPlay = false;\n  isRecord = false;\n  voiceData;\n  interval;\n\n  recordPos = 0;\n  playPos = 0;\n  playLimit = AUDIO_LENGTH;\n\n  voiceUrl: any;\n\n  @ViewChild('voiceObj', { static: true }) voiceObj: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<ProfileComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private navService: NavigationService,\n    private httpService: HttpService,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.professions = this.dataService.professions;\n    this.physiques = this.dataService.physiques;\n    this.religions = this.dataService.religions;\n    this.languages = this.dataService.languages;\n    this.statuses = this.dataService.statuses;\n\n    this.data = data.value['profile'];\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    const urlValidator = Validators.pattern(\n      '^https?://(www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@,!:%_+.~#?&//=]*)$'\n    );\n\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        firstName: [this.data.firstName, Validators.required],\n        website: [this.data.website, [urlValidator]],\n        desc: [\n          this.data.desc !== undefined ? this.data.desc : '',\n          [\n            Validators.required,\n            Validators.minLength(DESC_MIN),\n            Validators.maxLength(DESC_MAX),\n          ],\n        ],\n        languages: [[...this.data.languages]],\n        status: [this.data.status !== undefined ? this.data.status : 'I'],\n      }),\n      images: [\n        [...this.data.images],\n        [Validators.required, Validators.minLength(3)],\n      ],\n      voice: [this.data.voice],\n    });\n\n    this.images = (this.data.images as Array<string>).map(\n      (image) =>\n        location.origin + '/backend' + this.url + '/images/' + image['name']\n    );\n\n    this.voiceUrl =\n      location.origin + '/backend' + this.url + '/voice/' + this.data.voice;\n  }\n\n  onHeight(evt): void {\n    this.data.height = evt.value;\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  noCache(img) {\n    return img + '?' + Date.now();\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(EditorComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        idx,\n        src:\n          this.images[idx] !== undefined\n            ? this.images[idx].split('?')[0] + '_orig'\n            : this.images[idx],\n        value: this.formGroup.controls['images'].value[idx],\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        const images = this.formGroup.controls['images'].value;\n        images[result.idx] = { name: result.id, mtx: result.mtx };\n        this.formGroup.controls['images'].setValue(images);\n        this.data.images[result.idx] = images[result.idx];\n\n        this.images = (this.data.images as Array<string>).map(\n          (image) =>\n            location.origin +\n            '/backend' +\n            this.url +\n            '/images/' +\n            image['name'] +\n            '?' +\n            Date.now()\n        );\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      raw.data.position = this.navService.pos;\n      raw.data.images = raw.images;\n\n      const formData = new FormData();\n\n      const profile = new Blob([JSON.stringify(raw.data)], {\n        type: 'application/json',\n      });\n      formData.append('profile', profile);\n\n      if (this.voiceData !== undefined) {\n        formData.append('voice', this.voiceData);\n      }\n\n      this.httpService.save(this.url, formData).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    // stale value !!!\n    this.dialogRef.close();\n  }\n\n  record(): void {\n    if (this.isRecord) {\n      return;\n    }\n    // check/request permission on android\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        const chunks = [];\n        /*var options = {\n              audioBitsPerSecond : 128000,\n              videoBitsPerSecond : 2500000,\n              mimeType : 'video/mp4'\n              }*/\n        const recorder = new MediaRecorder(stream /*,options*/);\n\n        recorder.ondataavailable = (e) => {\n          chunks.push(e.data);\n\n          if (recorder.state === 'inactive') {\n            // ;codecs=h264 can be used to be able to play on ios\n            const blob = new Blob(chunks, { type: 'audio/webm' });\n            this.voiceData = blob;\n            this.voiceUrl = this.domSanitizer.bypassSecurityTrustUrl(\n              URL.createObjectURL(blob)\n            );\n          }\n        };\n\n        recorder.start();\n        this.isRecord = true;\n\n        this.interval = setInterval(() => {\n          this.recordPos++;\n        }, 500);\n\n        setTimeout(() => {\n          setTimeout(() => {\n            this.recordPos = 0;\n            this.isRecord = false;\n          }, 500);\n\n          clearInterval(this.interval);\n          recorder.stop();\n        }, AUDIO_LENGTH);\n      })\n      .catch(console.error);\n  }\n\n  play(): void {\n    if (this.voiceObj === undefined || this.isPlay) {\n      return;\n    }\n\n    this.isPlay = true;\n\n    this.voiceObj.nativeElement['load']();\n\n    const method = this.isPlay ? 'play' : 'pause';\n    this.voiceObj.nativeElement[method]();\n  }\n\n  updateTime(evt): void {\n    this.playPos = this.voiceObj.nativeElement.currentTime * 1000;\n  }\n\n  ended(evt): void {\n    this.isPlay = false;\n    this.playPos = 0;\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Personal data</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Status</mat-label>\n          <mat-select [formControlName]=\"'status'\">\n            <mat-option *ngFor=\"let status of statuses\" [value]=\"status.value\">\n              {{ status.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Enter the name of your business</mat-label>\n          <input matInput [formControlName]=\"'firstName'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('firstName').invalid\"\n            >Name of business is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Enter Website Url</mat-label>\n          <input matInput [formControlName]=\"'website'\" type=\"url\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('website').invalid\"\n            >Website url is required!</mat-error\n          >\n        </mat-form-field>\n        <fieldset>\n          <legend>Description (min. 10, max. 160)</legend>\n          <div legend-right>\n            {{ formGroup.controls.data.get('desc').value.length }}\n          </div>\n          <mat-form-field>\n            <textarea\n              matInput\n              [formControlName]=\"'desc'\"\n              rows=\"5\"\n              maxlength=\"160\"\n            ></textarea>\n            <mat-error *ngIf=\"formGroup.controls.data.get('desc').invalid\"\n              >Description is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n        <mat-form-field>\n          <mat-label>Languages</mat-label>\n          <mat-select [formControlName]=\"'languages'\" multiple>\n            <mat-option\n              *ngFor=\"let language of languages\"\n              [value]=\"language.value\"\n              >{{ language.viewValue }}</mat-option\n            >\n          </mat-select>\n        </mat-form-field>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.images.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Images</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <mat-card\n          matRipple\n          default\n          *ngFor=\"let n of numSequence(3); let i = index\"\n          (click)=\"openDialog(i)\"\n        >\n          <img *ngIf=\"images.length > i\" mat-card-image [src]=\"images[i]\" />\n        </mat-card>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.voice.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Voice</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <fieldset class=\"voice\">\n          <legend>Voice</legend>\n          <div\n            mat-button\n            matRipple\n            (click)=\"record()\"\n            style=\"margin-left: auto; border-radius: 50%\"\n          >\n            <svg\n              [style]=\"\n                '--pos:' + recordPos + ';--buff:0;--limit: 10;width:30px;'\n              \"\n              class=\"chart\"\n              viewBox=\"0 0 24 24\"\n            >\n              <g transform=\"rotate(-90 12 12)\">\n                <circle class=\"pos\" r=\"10\" cy=\"12\" cx=\"12\" />\n                <circle class=\"buff\" r=\"10\" cy=\"12\" cx=\"12\" />\n              </g>\n            </svg>\n            <mat-icon\n              mat-rate\n              [ngStyle]=\"{ color: !isPlay ? 'black' : 'gray' }\"\n              >{{ isRecord ? 'stop' : 'mic' }}</mat-icon\n            >\n          </div>\n          <div\n            mat-button\n            matRipple\n            (click)=\"play()\"\n            style=\"margin-right: auto; border-radius: 50%\"\n          >\n            <svg\n              [style]=\"\n                '--pos:' +\n                playPos +\n                ';--buff:0;--limit:' +\n                playLimit +\n                ';width:30px;'\n              \"\n              class=\"chart\"\n              viewBox=\"0 0 24 24\"\n            >\n              <g transform=\"rotate(-90 12 12)\">\n                <circle class=\"pos\" r=\"10\" cy=\"12\" cx=\"12\" />\n                <circle class=\"buff\" r=\"10\" cy=\"12\" cx=\"12\" />\n              </g>\n            </svg>\n            <mat-icon\n              mat-rate\n              [ngStyle]=\"{ color: !isRecord ? 'black' : 'gray' }\"\n              >{{ isPlay ? 'stop' : 'play_arrow' }}</mat-icon\n            >\n          </div>\n          <audio\n            #voiceObj\n            preload=\"none\"\n            (timeupdate)=\"updateTime($event)\"\n            (ended)=\"ended($event)\"\n          >\n            <source [src]=\"voiceUrl\" type=\"audio/ogg\" />\n          </audio>\n        </fieldset>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","export * from './basket/basket.component';\nexport * from './editor/editor.component';\nexport * from './event/event.component';\nexport * from './panel/panel.component';\nexport * from './qrcode/qrcode.component';\nexport * from './reward/reward.component';\nexport * from './help/help.component';\nexport * from './forms';\n","import {\n  AfterViewInit,\n  Component,\n  ComponentFactoryResolver,\n  Inject,\n  Injector,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\nimport { HttpService } from 'src/app/services/http.service';\nimport { TransformService } from 'src/app/services/transform.service';\nimport { MsPanel } from 'src/lib';\nimport { BasketComponent } from '../../basket/basket.component';\nimport { EventFormComponent } from '../event/event.component';\nexport interface Option {\n  value: string;\n  viewValue: string;\n}\n\nconst templateTypes = [\n  { value: 'e', viewValue: 'Event' },\n  { value: 'i', viewValue: 'Idea' },\n  { value: 'j', viewValue: 'Job' },\n];\n\nconst injector = Injector.create({\n  providers: [{ provide: MsPanel, deps: [] }],\n});\n\n@Component({\n  selector: 'app-campaign',\n  templateUrl: './campaign.component.html',\n})\nexport class CampaignFormComponent implements OnInit, AfterViewInit {\n  @ViewChild('templatePanel', { static: true, read: ViewContainerRef })\n  templatePanelRef: ViewContainerRef;\n\n  @ViewChild('groupPanel', { static: true, read: ViewContainerRef })\n  groupPanelRef: ViewContainerRef;\n\n  formGroup: FormGroup;\n\n  images: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  types: any;\n  groupTypes: any;\n\n  title: any = 'Promotion';\n\n  slotsNum = 0;\n\n  constructor(\n    private cfr: ComponentFactoryResolver,\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<CampaignFormComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    private dataService: DataService,\n    public transformService: TransformService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.data = data.value ? data.value : { slots: [] };\n    this.url = data.url;\n\n    this.types = templateTypes;\n\n    const groupTypes = JSON.parse(JSON.stringify(this.dataService.groupTypes));\n    groupTypes.push({ value: 'g', viewValue: 'Group' });\n    this.groupTypes = groupTypes;\n  }\n\n  onGroupType(event) {\n    if (event.value === 'g') {\n      this.updatePanel(this.groupPanelRef, { type: 'evt' });\n    } else {\n      this.groupPanelRef.clear();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      if (this.data.item) {\n        const msg = this.transformService.transform({ event: this.data.item });\n        this.updatePanel(this.templatePanelRef, msg);\n      }\n\n      if (this.data.group) {\n        const msg = this.transformService.transform({ event: this.data.group });\n        this.updatePanel(this.groupPanelRef, msg);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    const offset = new Date().getTimezoneOffset() * 60000;\n    const dateFrom = new Date(Date.now() - offset);\n    const isoDateFrom = dateFrom.toISOString().substring(0, 16);\n    dateFrom.setMinutes(dateFrom.getMinutes() + 1);\n    const isoDateTo = dateFrom.toISOString().substring(0, 16);\n\n    const formGroup = this.fb.group({\n      data: this.fb.group({\n        name: [this.data.name, Validators.required],\n        // load own groups and save the choosen one to refId\n        count: [this.data.count ? this.data.count : 0, Validators.required],\n        type: [this.data.type /*, Validators.required*/],\n        item: [this.data.item /*, Validators.required*/],\n        groupType: [this.data.groupType, Validators.required],\n        group: [this.data.group /*,Validators.required*/],\n        range: this.fb.group(\n          {\n            start: [\n              this.data.range\n                ? this.data.range.start.substring(0, 16)\n                : isoDateFrom,\n              Validators.required,\n            ],\n            end: [\n              this.data.range\n                ? this.data.range.end.substring(0, 16)\n                : isoDateFrom,\n              Validators.required,\n            ],\n          },\n          { validator: DateTimeRangeValidator }\n        ),\n        // slots: [[...this.data.slots], [Validators.required]],\n      }),\n    });\n\n    this.initSlots(this.data.slots, formGroup);\n\n    this.formGroup = formGroup;\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  onTemplateSelect() {\n    const data = {\n      url: '/promotions/templates',\n      actions: [\n        {\n          component: EventFormComponent,\n          type: 'add',\n          icon: 'add',\n        },\n        {\n          component: EventFormComponent,\n          type: 'edit',\n        },\n        {\n          component: BasketComponent,\n          type: 'list',\n          data: {\n            actions: [\n              {\n                component: EventFormComponent,\n                type: 'add',\n                icon: 'add',\n              },\n              {\n                component: EventFormComponent,\n                type: 'edit',\n              },\n            ],\n            reset: true,\n            dialog: true,\n          },\n        },\n      ],\n      save: false,\n    };\n\n    const dialogRef = this.dialog.open(BasketComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data,\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        this.formGroup.controls['data']\n          .get('item')\n          .setValue({ key: result[0].info.id });\n\n        const tValue = result[0].info.value;\n        if (tValue !== undefined && tValue.capacity !== undefined) {\n          const slots = this.formGroup.controls['slots'] as FormArray;\n          slots.clear();\n\n          const range = this.formGroup.get('data').get('range');\n          this.addSlot(undefined, {\n            capacity: tValue.capacity,\n            range: {\n              min: new Date(range.get('start').value),\n              start: new Date(range.get('start').value),\n            },\n          });\n        }\n\n        this.updatePanel(this.templatePanelRef, result[0].info);\n      }\n    });\n  }\n\n  private updatePanel(panelRef, data: any) {\n    panelRef.clear();\n\n    const componentFactory = this.cfr.resolveComponentFactory(MsPanel);\n    const component = componentFactory.create(injector);\n\n    component.instance.onEnter('', data);\n\n    component.instance.show(true, true);\n    panelRef.insert(component.hostView);\n  }\n\n  onGroupSelect() {\n    const data = {\n      url: '/user/groups',\n      save: false,\n    };\n\n    const dialogRef = this.dialog.open(BasketComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data,\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        this.formGroup.controls['data']\n          .get('group')\n          .setValue({ key: result[0].info.id });\n\n        this.updatePanel(this.groupPanelRef, result[0].info);\n      }\n    });\n  }\n\n  onType(event) {\n    this.title = this.types.filter(\n      (type) => type.value === event.value\n    )[0].viewValue;\n\n    this.updatePanel(this.templatePanelRef, { type: 'evt' });\n  }\n\n  initSlots(pSlots, formGroup) {\n    const slots = pSlots.map((slot) => this.createSlot(slot));\n    this.slotsNum = slots.length;\n\n    formGroup.addControl(\n      'slots',\n      new FormArray(slots, [Validators.required, Validators.minLength(1)])\n    );\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      const raw = this.formGroup.getRawValue();\n\n      // convert to UTC - in every form it needs to be done\n      raw.data.slots = (raw.slots as Array<object>).map((slot) => {\n        const slotStartDate = new Date(slot['range'].start);\n        const offset = slotStartDate.getTimezoneOffset() * 60000;\n        slot['range'].start = new Date(\n          slotStartDate.getTime() - offset\n        ).toISOString();\n        return slot;\n      });\n\n      raw.data.key = this.data.key;\n      delete raw.slots;\n\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n\n  addSlot(event?, opts = {}) {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    (this.formGroup.controls['slots'] as FormArray).insert(\n      0,\n      this.createSlot(opts)\n    );\n\n    this.slotsNum++;\n  }\n\n  removeSlot(event, i) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    (this.formGroup.controls['slots'] as FormArray).removeAt(i);\n\n    this.slotsNum--;\n  }\n\n  createSlot(data): FormGroup {\n    return this.fb.group({\n      range: this.fb.group(\n        {\n          min: [data.range ? data.range.start : undefined],\n          start: [\n            data.range ? data.range.start : undefined,\n            Validators.required,\n          ],\n          end: [data.range ? data.range.end : new Date()],\n        },\n        { validator: DateMinValidator }\n      ),\n      numOfItems: [\n        data.numOfItems ? data.numOfItems : 0,\n        [Validators.required, Validators.pattern('^[0-9]+$')],\n      ],\n      capacity: this.fb.group(\n        {\n          min: [data.capacity ? data.capacity.min : 0, Validators.required],\n          max: [data.capacity ? data.capacity.max : 0, Validators.required],\n        },\n        { validator: RangeValidator }\n      ),\n    });\n  }\n}\n\nconst RangeValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const min = control.get('min').value;\n  const max = control.get('max').value;\n\n  return min <= max ? null : { range: true };\n};\n\nconst DateMinValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const min = new Date(control.get('min').value);\n  const start = new Date(min.toDateString());\n  const end = new Date(control.get('start').value);\n\n  return start !== null && end !== null && start <= end\n    ? null\n    : { range: true };\n};\n\nconst DateTimeRangeValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const start = new Date(control.get('start').value);\n  const end = new Date(control.get('end').value);\n  return start !== null && end !== null && start < end ? null : { range: true };\n};\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>{{ title }}</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Enter name</mat-label>\n          <input matInput [formControlName]=\"'name'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('name').invalid\"\n            >Name is required!</mat-error\n          >\n        </mat-form-field>\n        <fieldset formGroupName=\"range\">\n          <legend>Time</legend>\n          <mat-form-field>\n            <mat-label>From</mat-label>\n            <input matInput formControlName=\"start\" type=\"datetime-local\" />\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>To</mat-label>\n            <input matInput formControlName=\"end\" type=\"datetime-local\" />\n          </mat-form-field>\n          <mat-error *ngIf=\"formGroup.controls.data.get('range').invalid\"\n            >Invalid Range</mat-error\n          >\n        </fieldset>\n        <fieldset>\n          <legend>Template</legend>\n          <mat-form-field>\n            <mat-label>Type</mat-label>\n            <mat-select\n              [formControlName]=\"'type'\"\n              (selectionChange)=\"onType($event)\"\n            >\n              <mat-option *ngFor=\"let type of types\" [value]=\"type.value\">\n                {{ type.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <div style=\"width: 100%\" (click)=\"onTemplateSelect()\">\n            <ng-container #templatePanel> </ng-container>\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Group</legend>\n          <mat-form-field>\n            <mat-label>Group</mat-label>\n            <mat-select\n              [formControlName]=\"'groupType'\"\n              (selectionChange)=\"onGroupType($event)\"\n            >\n              <mat-option\n                *ngFor=\"let group of groupTypes\"\n                [value]=\"group.value\"\n              >\n                {{ group.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <div style=\"width: 100%\" (click)=\"onGroupSelect()\">\n            <ng-container #groupPanel> </ng-container>\n          </div>\n        </fieldset>\n      </mat-expansion-panel>\n      <mat-expansion-panel *ngIf=\"slotsNum > 0\">\n        <mat-expansion-panel-header\n          btn-accordion\n          [style.background-color]=\"\n            formGroup.controls.slots.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <button mat-mini-fab color=\"primary\" (click)=\"addSlot($event)\">\n            <mat-icon>add</mat-icon>\n          </button>\n          <mat-panel-title>Slots</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-accordion>\n          <mat-expansion-panel\n            formArrayName=\"slots\"\n            *ngFor=\"\n              let slot of formGroup.controls.slots.controls;\n              let i = index\n            \"\n          >\n            <mat-expansion-panel-header\n              btn-accordion\n              [style.background-color]=\"slot.valid ? 'yellowgreen' : '#f44336'\"\n            >\n              <button\n                mat-mini-fab\n                color=\"accent\"\n                (click)=\"removeSlot($event, i)\" *ngIf=\"slotsNum > 1\"\n              >\n                <mat-icon>remove</mat-icon>\n              </button>\n              <mat-panel-title>{{\n                (slot.get('range').get('start').value !== null\n                  ? (slot.get('range').get('start').value | date: 'dd/MM/yyyy')\n                  : '') +\n                  ' - ' +\n                  slot.get('numOfItems').value +\n                  ' / (' +\n                  slot.get('capacity').get('min').value +\n                  '-' +\n                  slot.get('capacity').get('max').value +\n                  ')'\n              }}</mat-panel-title>\n            </mat-expansion-panel-header>\n            <div [formGroupName]=\"i\">\n              <mat-form-field>\n                <mat-label>Number of Items</mat-label>\n                <input matInput formControlName=\"numOfItems\" />\n                <mat-error *ngIf=\"slot.get('numOfItems').invalid\"\n                  >Value is required!</mat-error\n                >\n              </mat-form-field>\n              <fieldset [formGroupName]=\"'capacity'\">\n                <legend>Capacity</legend>\n                <mat-form-field>\n                  <mat-label>Min</mat-label>\n                  <input matInput formControlName=\"min\" type=\"number\" />\n                </mat-form-field>\n                <mat-form-field>\n                  <mat-label>Max</mat-label>\n                  <input matInput formControlName=\"max\" type=\"number\" />\n                </mat-form-field>\n                <mat-error *ngIf=\"slot.get('capacity').invalid\"\n                  >Invalid Range</mat-error\n                >\n              </fieldset>\n              <fieldset [formGroupName]=\"'range'\">\n                <legend>Time</legend>\n                <mat-form-field>\n                  <mat-label>From</mat-label>\n                  <input\n                    matInput\n                    [matDatepicker]=\"pickerStart\"\n                    formControlName=\"start\"\n                  />\n                  <mat-datepicker-toggle\n                    matSuffix\n                    [for]=\"pickerStart\"\n                  ></mat-datepicker-toggle>\n                  <mat-datepicker #pickerStart></mat-datepicker>\n                </mat-form-field>\n                <mat-error *ngIf=\"slot.get('range').invalid\"\n                    >Start date of the slot must be greater than the date of the promotion!</mat-error\n                  >\n              </fieldset>\n            </div>\n          </mat-expansion-panel>\n        </mat-accordion>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UIModule } from '../ui/ui.module';\nimport { BusinessRoutingModule } from './business-routing.module';\nimport {\n  BasketComponent, CampaignFormComponent, CarFormComponent,\n  EditorComponent,\n  EventComponent,\n  EventFilterComponent, EventFormComponent,\n  FeedbackFormComponent, GroupFilterComponent, GroupFormComponent, HelpComponent, PanelComponent,\n  ProfileComponent, ProfileStatusComponent, QrcodeComponent, RewardComponent, SettingComponent\n} from './components';\n@NgModule({\n  declarations: [\n    CarFormComponent,\n    ProfileComponent,\n    SettingComponent,\n    EventFormComponent,\n    EventFilterComponent,\n    GroupFilterComponent,\n    PanelComponent,\n    EditorComponent,\n    BasketComponent,\n    EventComponent,\n    FeedbackFormComponent,\n    QrcodeComponent,\n    HelpComponent,\n    GroupFormComponent,\n    RewardComponent,\n    ProfileStatusComponent,\n    CampaignFormComponent,\n  ],\n  imports: [\n    UIModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BusinessRoutingModule,\n  ],\n  providers: [DatePipe],\n})\nexport class BusinessModule {}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from 'src/app/services/data.service';\n\n@Component({\n  selector: 'app-feedback',\n  templateUrl: './feedback.component.html',\n})\nexport class FeedbackFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<FeedbackFormComponent>,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.data = data.value ? data.value : { images: [] };\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        rate: [this.data.rate, Validators.required],\n        desc: [\n          this.data.desc !== undefined ? this.data.desc : '',\n          [\n            Validators.required,\n            Validators.minLength(10),\n            Validators.maxLength(160),\n          ],\n        ],\n      }),\n    });\n  }\n\n  onRate(evt): void {\n    this.data.rate = evt.value;\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Feedback</mat-panel-title>\n        </mat-expansion-panel-header>\n        <fieldset>\n          <legend>Rate</legend>\n          <div legend-right>{{ data.rate }}</div>\n          <mat-slider\n            min=\"0\"\n            max=\"9\"\n            [formControlName]=\"'rate'\"\n            (input)=\"onRate($event)\"\n          ></mat-slider>\n        </fieldset>\n        <fieldset>\n          <legend>Description (min. 10, max. 160)</legend>\n          <div legend-right>\n            {{ formGroup.controls.data.get('desc').value.length }}\n          </div>\n          <mat-form-field>\n            <textarea\n              matInput\n              [formControlName]=\"'desc'\"\n              rows=\"5\"\n              maxlength=\"160\"\n            ></textarea>\n            <mat-error *ngIf=\"formGroup.controls.data.get('desc').invalid\"\n              >Description is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpService } from 'src/app/services/http.service';\n\n@Component({\n  selector: 'app-basket',\n  templateUrl: './basket.component.html',\n})\nexport class BasketComponent implements OnInit {\n  items: Array<any> = new Array();\n\n  selectedIdx: any;\n  overlayData: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  url: any;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public dialogRef: MatDialogRef<BasketComponent>,\n    private activatedRoute: ActivatedRoute,\n    private httpService: HttpService\n  ) {\n    /*if (data.url !== undefined) {\n      this.url = data.url;\n    } else {*/\n    let url = this.activatedRoute['_routerState'].snapshot.url.replace(\n      '/base',\n      ''\n    );\n\n    url = url.substring(1);\n    this.url = url.substring(url.indexOf('/'));\n\n    //}\n  }\n\n  ngOnInit(): void {\n    if (this.data.selected !== undefined) {\n      this.onSelect(this.data.selected);\n    }\n  }\n\n  onClick(): void {\n    // attach the selected members\n    if (this.items.length > 0) {\n      if (this.data.save !== false) {\n        this.progress.mode = 'indeterminate';\n\n        const keys = new Array();\n        for (const item of this.items) {\n          keys.push(item.info.id);\n        }\n\n        this.httpService.save(this.url, keys).subscribe({\n          next: (value) => {\n            this.dialogRef.close(value);\n          },\n          error: (error) => {\n            this.progress.mode = 'determine';\n            this.progress.color = 'warn';\n          },\n          complete: () => {\n            this.progress.mode = 'determine';\n          },\n        });\n      } else {\n        this.dialogRef.close(this.items);\n      }\n    }\n  }\n\n  onBasket(idx): void {\n    if (idx === this.selectedIdx) {\n      this.selectedIdx = undefined;\n      this.overlayData = undefined;\n    } else {\n      this.selectedIdx = idx;\n      this.overlayData = this.items[idx].info;\n    }\n  }\n\n  onDelete(): void {\n    this.items.splice(this.selectedIdx, 1);\n    this.onBasket(this.selectedIdx);\n  }\n\n  onSelect(evt): void {\n    const items = new Array();\n    for (const item in evt) {\n      if (evt.hasOwnProperty(item)) {\n        items.push(evt[item]);\n      }\n    }\n    this.items = items; // [].concat(this.items.concat(items));\n  }\n\n  back(): void {\n    if (this.data.reset) {\n      this.dialogRef.close({});\n    } else {\n      this.dialogRef.close();\n    }\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  <div class=\"mat-basket-container\" *ngIf=\"!data.dialog\">\n    <mat-chip-list>\n      <mat-chip\n        *ngFor=\"let item of items; let idx = index\"\n        (click)=\"onBasket(idx)\" [ngClass]=\"{'ms-active': idx === selectedIdx}\"\n        matRipple\n      >\n        <p *ngIf=\"item.info.imgs && item.info.imgs[0]\" style=\"width: 40px;\">{{ item.info.header ? item.info.header.main : '' }}</p>\n        <p *ngIf=\"!item.info.imgs || !item.info.imgs[0]\">{{ item.info.header ? item.info.header.main : '' }}</p>\n        <mat-chip-avatar *ngIf=\"item.info.imgs && item.info.imgs[0]\"><img [src]=\"item.info.imgs[0]\"/></mat-chip-avatar>\n      </mat-chip>\n    </mat-chip-list>\n  </div>\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\" *ngIf=\"!data.dialog\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<div class=\"mat-basket-content\">\n  <ms-list\n    [url]=\"data.url\"\n    [multiple]=\"data.multiple\"\n    [actions]=\"data.actions\"\n    (msSelect)=\"onSelect($event)\"\n    [overlayData]=\"overlayData\"\n    (msDelete)=\"onDelete()\"\n    [selectable]=\"!data.dialog && true\"\n  >\n  </ms-list>\n</div>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from '../../../services/data.service';\n\n@Component({\n  selector: 'app-qrcode',\n  templateUrl: './qrcode.component.html',\n})\nexport class QrcodeComponent implements OnInit {\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n  \n  camera = false;\n  qrCode = 'sample text';\n\n  constructor(\n    public dialogRef: MatDialogRef<QrcodeComponent>,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    const params = new HttpParams();\n\n    this.httpService.get(this.url + '/code', params).subscribe({\n      next: (result) => {\n        this.qrCode = result['code'];\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  onScanned(evt): void {\n    this.httpService.post(this.url + '/verify', { code: evt }).subscribe({\n      next: (value) => {\n        this.dialogRef.close(value);\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n\n  turnCamera(on = false): void {\n    this.camera = on;\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-dialog-img\">\n  <ms-qrcode [qrCode]=\"qrCode\" [camera]=\"camera\" (msScanned)=\"onScanned($event)\"></ms-qrcode>\n</div>\n<div mat-dialog-actions align=\"center\">\n  <button *ngIf=\"!camera\" mat-icon-button (click)=\"turnCamera(true)\">\n    <mat-icon>cameraswitch</mat-icon>\n  </button>\n  <button *ngIf=\"camera\" mat-icon-button (click)=\"turnCamera(false)\">\n    <mat-icon>qr_code</mat-icon>\n  </button>\n</div>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpService } from 'src/app/services/http.service';\n\ninterface Option {\n  value: string;\n  viewValue: string;\n}\n\n// distance bar also, not just calendar bar\n\n@Component({\n  selector: 'app-group-filter',\n  templateUrl: './group-filter.component.html',\n})\nexport class GroupFilterComponent implements OnInit {\n  formGroup: FormGroup;\n\n  progress: any = { mode: 'determine', value: 0, color: 'primary' };\n\n  url: any;\n\n  key: any;\n\n  setting: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<GroupFilterComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private activatedRoute: ActivatedRoute,\n    private httpService: HttpService\n  ) {\n    this.url = '/user/settings';\n\n    let actionUrl = this.activatedRoute['_routerState'].snapshot.url.replace(\n      '/base',\n      ''\n    );\n\n    actionUrl = actionUrl.substring(1);\n    this.key = actionUrl.substring(actionUrl.indexOf('/'));\n  }\n\n  onData(key, evt): void {\n    this.formGroup.controls[key].setValue(evt.value);\n  }\n\n  ngOnInit(): void {\n    let params = new HttpParams();\n    params = params.set('key', this.key);\n\n    this.httpService.get(this.url, params).subscribe({\n      next: (result) => {\n        let formGroup = new FormGroup({});\n\n        this.setting = result;\n        this.setting.items.map((item) => {\n          switch (item.type) {\n            case 'os':\n              formGroup.addControl(item.name, new FormControl([...item.data]));\n            default:\n          }\n        });\n\n        this.formGroup = formGroup;\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      let raw = this.formGroup.getRawValue();\n\n      let items = this.setting.items.map((item) => {\n        if (raw[item.name] instanceof Array) {\n          item.data = [...raw[item.name]];\n        } else {\n          item.data = [raw[item.name]];\n        }\n        return item;\n      });\n\n      this.setting.items = items;\n\n      let params = new HttpParams();\n      params = params.set('key', this.key);\n\n      this.httpService.save(this.url, this.setting, params).subscribe({\n        next: (result) => {\n          this.dialogRef.close(result['items']);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n    <fieldset *ngFor=\"let item of setting.items\">\n      <legend>{{item.name}}</legend>\n      <div legend-right>{{ item.options[formGroup.controls[item.name].value].viewValue }}</div>\n      <mat-slider\n        min=\"0\"\n        [max]=\"item.options.length - 1\"\n        [formControlName]=\"item.name\"\n        (input)=\"onData(item.name, $event)\"\n      ></mat-slider>\n    </fieldset>\n  </form>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\n\ninterface Option {\n  value: string;\n  viewValue: string;\n}\n@Component({\n  selector: 'app-event-filter',\n  templateUrl: './event-filter.component.html',\n})\nexport class EventFilterComponent implements OnInit {\n  formGroup: FormGroup;\n\n  categories: any;\n  currencies: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<EventFilterComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dataService: DataService\n  ) {\n    this.categories = this.dataService.eventCategories;\n    this.currencies = this.dataService.currencies;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      category: [''],\n      city: [''],\n      free: [''],\n      /*amount: this.fb.group({\n        from: [\"\", [Validators.required, Validators.pattern(\"^[0-9]*$\")]],\n        to: [\"\", [Validators.required, Validators.pattern(\"^[0-9]*$\")]],\n        currency: [\"\", Validators.required]\n      }),*/\n    });\n  }\n\n  onClick(): void {\n    let raw;\n\n    if (this.formGroup.valid) {\n      raw = this.formGroup.getRawValue();\n    }\n    this.dialogRef.close(raw);\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-form-field>\n      <mat-label>Category</mat-label>\n      <mat-select formControlName=\"category\">\n        <mat-option\n          *ngFor=\"let category of categories\"\n          [value]=\"category.value\"\n        >\n          {{ category.viewValue }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>City</mat-label>\n      <input matInput formControlName=\"city\" />\n      <mat-error *ngIf=\"formGroup.controls['city'].invalid\"\n        >City is required!</mat-error\n      >\n    </mat-form-field>\n    <mat-slide-toggle labelPosition=\"before\" #paid formControlName=\"free\">{{\n      paid.checked ? 'Paid' : 'Free'\n    }}</mat-slide-toggle>\n    <!--<fieldset *ngIf=\"paid.checked\" formGroupName=\"amount\">\n    <legend>Amount</legend>\n    <mat-form-field>\n      <mat-label>From</mat-label>\n      <input matInput formControlName=\"from\" type=\"number\"/>\n      <mat-error *ngIf=\"formGroup.controls.amount.controls['from'].invalid\"\n        >Number is required!</mat-error\n      >\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>To</mat-label>\n      <input matInput formControlName=\"to\" type=\"number\"/>\n      <mat-error *ngIf=\"formGroup.controls.amount.controls['to'].invalid\"\n        >Number is required!</mat-error\n      >\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Currency</mat-label>\n      <mat-select formControlName=\"currency\">\n        <mat-option\n          *ngFor=\"let currency of currencies\"\n          [value]=\"currency.value\"\n        >\n          {{ currency.viewValue }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </fieldset>-->\n  </form>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\nimport { HttpService } from 'src/app/services/http.service';\n\nconst DESC_MIN = 10;\nconst DESC_MAX = 160;\n\n@Component({\n  selector: 'app-event',\n  templateUrl: './event.component.html',\n})\nexport class EventFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  categories: any;\n  currencies: any;\n  types: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  isAdd: any;\n\n  isPriority = true;\n\n  isMain = true;\n\n  category = 'l';\n\n  // main event flag - only one main event does exist, which contains assign car and signal chat group\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<EventFormComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dataService: DataService,\n    private httpService: HttpService\n  ) {\n    this.categories = this.dataService.eventCategories;\n    this.currencies = this.dataService.currencies;\n\n    if (data.extra !== undefined) {\n      if (data.extra.main !== undefined) {\n        this.isMain = data.isAdd ? false : data.extra.main;\n      }\n\n      if (data.extra.category !== undefined) {\n        this.category = data.extra.category;\n      }\n    }\n\n    if (data.url.indexOf('items') === -1) {\n      this.types = this.dataService.eventTypes.filter((obj) => {\n        return obj.value === 'g';\n      });\n    } else {\n      this.types = this.dataService.eventTypes;\n    }\n\n    if (data.url.indexOf('promotions') !== -1) {\n      this.isPriority = false;\n    }\n\n    this.data = data.value ? data.value : { type: 'g', amount: {} };\n    this.url = data.url;\n  }\n\n  validatorsForChatKey(type) {\n    const validators = new Array();\n    if (type === 'g') {\n      validators.push(Validators.required);\n    }\n\n    validators.push(\n      Validators.pattern(\n        '^https?://(www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@,!:%_+.~#?&//=]*)$'\n      )\n    );\n    return validators;\n  }\n\n  // if random, then you can set activity profile date from and you rated greater than\n  ngOnInit(): void {\n    const chatKeyValidators = new Array();\n\n    chatKeyValidators.push(\n      Validators.pattern(\n        '^https?://(www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@,!:%_+.~#?&//=]*)$'\n      )\n    );\n\n    const chatUrlValidators = this.validatorsForChatKey(this.data.type);\n\n    const offset = new Date().getTimezoneOffset() * 60000;\n    const dateFrom = new Date(Date.now() - offset);\n    const isoDateFrom = dateFrom.toISOString().substring(0, 16);\n    dateFrom.setMinutes(dateFrom.getMinutes() + 1);\n    const isoDateTo = dateFrom.toISOString().substring(0, 16);\n\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        type: [this.data.type, Validators.required],\n        optional: [\n          this.data.optional ? this.data.optional : false,\n          Validators.required,\n        ],\n        ticket: [\n          this.data.ticket ? this.data.ticket : false,\n          Validators.required,\n        ],\n        chatKey: [this.data.chatKey, [...chatUrlValidators]],\n        category: [\n          {\n            value:\n              this.category !== undefined ? this.category : this.data.category,\n            disabled: !this.isMain,\n          },\n          Validators.required,\n        ],\n        position: [\n          this.data.position !== undefined\n            ? this.data.position.x + ', ' + this.data.position.y\n            : '',\n          Validators.required,\n        ],\n        capacity: this.fb.group(\n          {\n            min: [\n              this.data.capacity ? this.data.capacity.min : 0,\n              Validators.required,\n            ],\n            max: [\n              this.data.capacity ? this.data.capacity.max : 0,\n              Validators.required,\n            ],\n          },\n          { validator: RangeValidator }\n        ),\n        name: [this.data.name, Validators.required],\n        urlRef: [this.data.urlRef, [...chatKeyValidators]], // google\n        range: this.fb.group(\n          {\n            start: [\n              this.data.range\n                ? this.data.range.start.substring(0, 16)\n                : isoDateFrom,\n              Validators.required,\n            ],\n            end: [\n              this.data.range\n                ? this.data.range.end.substring(0, 16)\n                : isoDateFrom,\n              Validators.required,\n            ],\n          },\n          { validator: DateTimeRangeValidator }\n        ),\n        desc: [\n          this.data.desc !== undefined ? this.data.desc : '',\n          [\n            Validators.required,\n            Validators.minLength(DESC_MIN),\n            Validators.maxLength(DESC_MAX),\n          ],\n        ],\n        telNum: [\n          this.data.telNum,\n          this.data.type === 'c' ? Validators.required : undefined,\n        ],\n        priority: [\n          this.data.priority ? this.data.priority : false,\n          Validators.required,\n        ],\n      }),\n      rule: this.fb.group({\n        balanced: [\n          this.data.rule && this.data.rule.balanced\n            ? this.data.rule.balanced\n            : false,\n          Validators.required,\n        ],\n        met: [\n          this.data.rule && this.data.rule.met ? this.data.rule.met : false,\n          Validators.required,\n        ],\n        rate: [\n          this.data.rule && this.data.rule.rate ? this.data.rule.rate : 0,\n          [Validators.required, Validators.pattern('^[0-9]+$')],\n        ],\n        range: this.fb.group(\n          {\n            start: [\n              this.data.rule && this.data.rule.range\n                ? this.data.rule.range.start\n                : undefined,\n            ],\n            end: [\n              this.data.rule && this.data.rule.range\n                ? this.data.rule.range.end\n                : undefined,\n            ],\n          },\n          { validator: DateTimeRangeValidator }\n        ),\n      }),\n      expense: this.fb.group({\n        amount: this.fb.group({\n          value: [\n            this.data.amount.value,\n            [\n              Validators.required,\n              Validators.pattern('^[0-9]+[\\\\.]?[0-9]{0,}$'),\n            ],\n          ],\n          currency: [this.data.amount.currency, Validators.required],\n        }),\n      }),\n    });\n  }\n\n  onTypeChange(event) {\n    (this.formGroup.controls['data'] as FormGroup).controls[\n      'chatKey'\n    ].clearValidators();\n\n    const chatUrlValidators = this.validatorsForChatKey(event.value);\n    (this.formGroup.controls['data'] as FormGroup).controls[\n      'chatKey'\n    ].setValidators([...chatUrlValidators]);\n\n    (this.formGroup.controls['data'] as FormGroup).controls[\n      'chatKey'\n    ].updateValueAndValidity();\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      const raw = this.formGroup.getRawValue();\n      raw.data.amount = raw.expense.amount;\n      raw.data.rule = raw.rule;\n      raw.data.key = this.data.key;\n\n      raw.data.position = raw.data.position\n        .split(',')\n        .map((item) => item.trim());\n\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          console.log(value);\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n\nconst RangeValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const min = control.get('min').value;\n  const max = control.get('max').value;\n\n  return min <= max ? null : { range: true };\n};\n\nconst DateTimeRangeValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const startS = control.get('start').value;\n  const endS = control.get('end').value;\n\n  let start;\n  if (startS !== null) {\n    start = new Date(startS);\n  }\n\n  let end;\n  if (endS !== null) {\n    end = new Date(endS);\n  }\n\n  return start === undefined || end === undefined || start < end\n    ? null\n    : { range: true };\n};\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Info</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Type</mat-label>\n          <mat-select\n            [formControlName]=\"'type'\"\n            (selectionChange)=\"onTypeChange($event)\"\n          >\n            <mat-option *ngFor=\"let type of types\" [value]=\"type.value\">\n              {{ type.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Enter name</mat-label>\n          <input matInput [formControlName]=\"'name'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('name').invalid\"\n            >Name is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field\n          *ngIf=\"formGroup.controls.data.get('type').value === 'g'\"\n        >\n          <mat-label>Enter Chat Url</mat-label>\n          <input matInput [formControlName]=\"'chatKey'\" type=\"url\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('chatKey').invalid\"\n            >Chat url is required!</mat-error\n          >\n        </mat-form-field>\n        <fieldset>\n          <legend>Location</legend>\n          <mat-form-field>\n            <mat-label>Category</mat-label>\n            <mat-select [formControlName]=\"'category'\">\n              <mat-option\n                *ngFor=\"let category of categories\"\n                [value]=\"category.value\"\n              >\n                {{ category.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Enter Location (latitude,longitude)</mat-label>\n            <div class=\"btn_form_bar\">\n              <div class=\"btn_form\">\n                <div class=\"map container\">\n                  <a href=\"https://maps.google.com\" target=\"_blank\">\n                    <img class=\"img\" />\n                  </a>\n                </div>\n              </div>\n            </div>\n            <input matInput [formControlName]=\"'position'\" />\n            <mat-error *ngIf=\"formGroup.controls.data.get('position').invalid\"\n              >Position is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Reference link (Google, Booking etc.)</mat-label>\n            <input matInput [formControlName]=\"'urlRef'\" />\n            <mat-error *ngIf=\"formGroup.controls.data.get('urlRef').invalid\"\n              >Address is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n        <fieldset formGroupName=\"range\">\n          <legend>Time</legend>\n          <mat-form-field>\n            <mat-label>From</mat-label>\n            <input matInput formControlName=\"start\" type=\"datetime-local\" />\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>To</mat-label>\n            <input matInput formControlName=\"end\" type=\"datetime-local\" />\n          </mat-form-field>\n          <mat-error *ngIf=\"formGroup.controls.data.get('range').invalid\"\n            >Invalid Range</mat-error\n          >\n        </fieldset>\n        <mat-slide-toggle\n        *ngIf=\"!isMain\"\n        [formControlName]=\"'optional'\"\n        labelPosition=\"before\"\n        >Optional</mat-slide-toggle\n      >\n      <fieldset formGroupName=\"capacity\" *ngIf=\"isMain || formGroup.controls.data.get('optional').value\">\n          <legend>Capacity</legend>\n          <mat-form-field>\n            <mat-label>Min</mat-label>\n            <input matInput formControlName=\"min\" type=\"number\" />\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Max</mat-label>\n            <input matInput formControlName=\"max\" type=\"number\" />\n          </mat-form-field>\n          <mat-error *ngIf=\"formGroup.controls.data.get('capacity').invalid\"\n            >Invalid Range</mat-error\n          >\n        </fieldset>\n        <fieldset>\n          <legend>Description (min. 10, max. 160)</legend>\n          <div legend-right>\n            {{ formGroup.controls.data.get('desc').value.length }}\n          </div>\n          <mat-form-field>\n            <textarea\n              matInput\n              [formControlName]=\"'desc'\"\n              rows=\"5\"\n              maxlength=\"160\"\n            ></textarea>\n            <mat-error *ngIf=\"formGroup.controls.data.get('desc').invalid\"\n              >Description is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n        <mat-form-field\n          *ngIf=\"\n            formGroup.controls.data.get('type').value === 'c' ||\n            formGroup.controls.data.get('type').value === 'g'\n          \"\n        >\n          <mat-label>Enter Telephone Number</mat-label>\n          <input matInput [formControlName]=\"'telNum'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('telNum').invalid\"\n            >Telephone Number is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-slide-toggle [formControlName]=\"'ticket'\" labelPosition=\"before\"\n          >Ticket</mat-slide-toggle\n        >\n        <mat-slide-toggle *ngIf=\"isPriority && isMain\" [formControlName]=\"'priority'\" labelPosition=\"before\"\n          >Priority</mat-slide-toggle\n        >\n      </mat-expansion-panel>\n      <mat-expansion-panel\n        formGroupName=\"rule\"\n        *ngIf=\"formGroup.controls.data.get('priority').value\"\n      >\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.rule.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Rule</mat-panel-title>\n        </mat-expansion-panel-header>\n        <div>\n          <mat-slide-toggle\n            [formControlName]=\"'balanced'\"\n            labelPosition=\"before\"\n            >Balanced Female/Male Ratio</mat-slide-toggle\n          >\n          <mat-form-field>\n            <mat-label>Rate From</mat-label>\n            <input matInput [formControlName]=\"'rate'\" />\n            <mat-error *ngIf=\"formGroup.controls.rule.get('rate').invalid\"\n              >Value is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-slide-toggle [formControlName]=\"'met'\" labelPosition=\"before\"\n            >Has already met</mat-slide-toggle\n          >\n          <fieldset formGroupName=\"range\">\n            <legend>Time</legend>\n            <mat-form-field>\n              <mat-label>Date After</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"pickerStart\"\n                formControlName=\"start\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"pickerStart\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #pickerStart></mat-datepicker>\n            </mat-form-field>\n            <mat-form-field>\n              <mat-label>Date Before</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"pickerEnd\"\n                formControlName=\"end\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"pickerEnd\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #pickerEnd></mat-datepicker>\n            </mat-form-field>\n            <mat-error *ngIf=\"formGroup.controls.rule.get('range').invalid\"\n              >Invalid Range</mat-error\n            >\n          </fieldset>\n        </div>\n      </mat-expansion-panel>\n      <mat-expansion-panel formGroupName=\"expense\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.expense.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Expense</mat-panel-title>\n        </mat-expansion-panel-header>\n        <fieldset formGroupName=\"amount\">\n          <legend>Amount</legend>\n          <mat-form-field>\n            <mat-label>eg. 12.34</mat-label>\n            <input matInput [formControlName]=\"'value'\" />\n            <mat-error\n              *ngIf=\"\n                formGroup.controls.expense.get('amount').get('value').invalid\n              \"\n              >Value is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Currency</mat-label>\n            <mat-select [formControlName]=\"'currency'\">\n              <mat-option\n                *ngFor=\"let currency of currencies\"\n                [value]=\"currency.value\"\n              >\n                {{ currency.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </fieldset>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { HttpEventType } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Canvas } from 'src/lib/offscreen';\nimport { HttpService } from '../../../services/http.service';\nimport { EventBusService } from '../../../services/event-bus.service';\n\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n})\nexport class EditorComponent implements OnInit {\n  private mtx: any;\n  private img: any;\n  private size: any;\n  private file: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  constructor(\n    public dialogRef: MatDialogRef<EditorComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private eventBusService: EventBusService,\n    public httpService: HttpService,\n    private domSanitizer: DomSanitizer\n  ) {}\n\n  onChange(evt) {\n    if (evt.img) {\n      this.img = evt.img;\n    }\n\n    if (evt.size) {\n      this.size = evt.size;\n    }\n\n    if (evt.mtx) {\n      this.mtx = evt.mtx;\n    }\n  }\n\n  ngOnInit(): void {}\n\n  onClick(): void {\n    const canvas = new Canvas(this.size.width, this.size.width);\n    const img = canvas.load(this.img, this.mtx, 0.9);\n\n    const edited = new Blob([img], { type: 'application/octet-stream' });\n\n    this.progress.mode = 'indeterminate';\n\n    const url =\n      'images' +\n      (this.data.value !== undefined ? '/' + this.data.value.name : '');\n\n    const formData = new FormData();\n    /*\n    for (const paramName in params) {\n      formData.append(imgCanvas[],img);\n    }\n    */\n    formData.append('orig', this.file);\n    formData.append('edited', edited);\n\n    this.httpService.upload(url, formData).subscribe({\n      next: (event) => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.progress.mode = 'determine';\n          this.progress.value = Math.round(100 * (event.loaded / event.total));\n        } else if (event.type === HttpEventType.Response) {\n          if (event.status === 201 || event.status === 200) {\n            this.dialogRef.close({\n              id: event.body['name'],\n              idx: this.data.idx,\n              mtx: this.mtx,\n            });\n          }\n        }\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n\n  selectFile(e?) {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      this.data.src = reader.result as string;\n    };\n    if (e.target.files[0]) {\n      this.file = e.target.files[0];\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  rotate(value) {\n    this.eventBusService.rotate.emit({ degree: value });\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-dialog-img\">\n  <ms-editor *ngIf=\"data\" [data]=\"data\" (changed)=\"onChange($event)\"></ms-editor>\n</div>\n<div mat-dialog-actions align=\"center\">\n  <button mat-icon-button (click)=\"rotate(-90)\">\n    <mat-icon>rotate_left</mat-icon>\n  </button>\n  <button mat-icon-button (click)=\"fileInput.click()\">\n    <mat-icon>image_search</mat-icon>\n  </button>\n  <input type=\"file\" #fileInput class=\"file_button\" (change)=\"selectFile($event)\"/>\n  <button mat-icon-button (click)=\"rotate(90)\">\n    <mat-icon>rotate_right</mat-icon>\n  </button>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-help',\n  templateUrl: './help.component.html',\n})\nexport class HelpComponent {\n  constructor() {}\n}\n","Help\n","export * from './car/car.component';\nexport * from './group/group.component';\nexport * from  './event-filter/event-filter.component';\nexport * from  './group-filter/group-filter.component';\nexport * from  './event/event.component';\nexport * from  './profile/profile.component';\nexport * from  './setting/setting.component';\nexport * from  './feedback/feedback.component';\nexport * from  './profile-status/profile-status.component';\nexport * from  './campaign/campaign.component';\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MsList } from 'src/lib';\nimport {\n  BasketComponent,\n  CampaignFormComponent,\n  CarFormComponent,\n  EventFormComponent,\n  FeedbackFormComponent,\n  GroupFormComponent,\n  PanelComponent,\n  ProfileComponent,\n  ProfileStatusComponent,\n  QrcodeComponent,\n  RewardComponent,\n  SettingComponent,\n} from './components';\n\n// filter, add, attach\nconst routes: Routes = [\n  { path: '', redirectTo: 'activity', pathMatch: 'full' },\n  {\n    path: 'activity',\n    data: {\n      reuse: true,\n      icon: 'notifications',\n    },\n    children: [\n      { path: '', redirectTo: 'events', pathMatch: 'full' },\n      {\n        path: 'events',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'insert_invitation',\n          actions: [\n            {\n              // component: EventFormComponent,\n              component: QrcodeComponent,\n              type: 'verify',\n            },\n            {\n              // component: EventFormComponent,\n              component: QrcodeComponent,\n              type: 'code',\n            },\n          ],\n          multiple: true,\n          event: true, //temporary\n          animation: 'One',\n          group: 'date',\n        },\n      },\n      {\n        path: 'events/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'list',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n                {\n                  component: EventFormComponent,\n                  type: 'edit',\n                },\n              ],\n              event: true, //temporary\n              animation: 'One1',\n            },\n          },\n          {\n            path: 'items/:id',\n            data: {\n              icon: 'insert_invitation',\n              dialog: true,\n            },\n            children: [\n              { path: '', redirectTo: 'members', pathMatch: 'full' },\n              {\n                path: 'members',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  animation: 'Two1',\n                },\n              },\n            ],\n          },\n          {\n            path: 'members',\n            component: MsList,\n            data: {\n              animation: 'One',\n              reuse: true,\n              icon: 'groups',\n              actions: [\n                {\n                  component: BasketComponent,\n                  type: 'add',\n                  icon: 'add',\n                  multiple: true,\n                  // only profiles - members url part will be replaced by profiles\n                  url: '/games/rate_met', // backend call - not rate_met, filter out already added members\n                },\n              ],\n            },\n            children: [\n              { path: '', redirectTo: 'schools', pathMatch: 'full' },\n              {\n                path: 'schools',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  animation: 'One1',\n                },\n              },\n            ],\n          },\n          {\n            path: 'feedbacks',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'feedback_ext',\n              actions: [\n                {\n                  component: FeedbackFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n                {\n                  component: FeedbackFormComponent,\n                  type: 'edit',\n                },\n              ],\n            },\n          },\n        ],\n      },\n      {\n        path: 'invitations',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'mail',\n          event: true, //temporary\n          animation: 'Two',\n        },\n      },\n      {\n        path: 'invitations/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'list',\n              event: true, //temporary\n              animation: 'Two1',\n            },\n          },\n\n          {\n            path: 'members',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'groups',\n              actions: [],\n            },\n          },\n          {\n            path: 'feedbacks',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'feedback_ext',\n            },\n          },\n        ],\n      },\n      {\n        path: 'promotions',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'campaign',\n          animation: 'One',\n        },\n      },\n      {\n        path: 'promotions/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              event: true, //temporary\n              animation: 'One1',\n            },\n          },\n        ],\n      },\n    ],\n  },\n  {\n    path: 'user',\n    data: {\n      reuse: true,\n      icon: 'person',\n      //type: 'P',\n    },\n    children: [\n      { path: '', redirectTo: 'profile', pathMatch: 'full' },\n      {\n        path: 'profile',\n        component: PanelComponent,\n        data: {\n          reuse: true,\n          icon: 'profile_ext',\n          actions: [\n            {\n              component: RewardComponent,\n              type: 'share',\n              icon: 'send',\n            },\n            {\n              component: RewardComponent,\n              type: 'reward',\n              icon: 'military_tech',\n            },\n            {\n              component: SettingComponent,\n              type: 'logout',\n              icon: 'logout',\n              color: 'warn',\n            },\n            { component: ProfileComponent, type: 'edit', icon: 'edit' },\n          ],\n        },\n      },\n      {\n        path: 'cars',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'airport_shuttle',\n          actions: [\n            {\n              component: CarFormComponent,\n              type: 'add',\n              icon: 'add',\n            },\n            {\n              component: CarFormComponent,\n              type: 'edit',\n            },\n          ],\n          event: true, //temporary\n        },\n      },\n      // with registered profession, offer service az ismerosoknek - festes, villanyszereles stb.??\n      // itt fontos, hogy a munka elvegzeseert jar a csillag nem a kulsoert\n\n      // job search (recommendation menu - jobs / events / people),\n      // job announcement (profile, create campaign - job advertisement or idea - last two icon),\n      // game menu (click on each other)...\n\n      // it's for group invite, when you are going to restructure a team (at the top menu bar)\n      // you can select event created by organizer or you can organize your own by group\n      // admin groups has statistics tab - who is the less popular, why? who is the most populat why?\n      // why is when you like by category for people\n      // show optimal groups (the size of the group is configurable)\n      {\n        path: 'groups',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'groups',\n          actions: [\n            {\n              component: GroupFormComponent,\n              type: 'add',\n              icon: 'group_add',\n            },\n            {\n              component: GroupFormComponent,\n              type: 'edit',\n            },\n            {\n              component: GroupFormComponent,\n              type: 'share',\n            },\n          ],\n        },\n      },\n      {\n        path: 'groups/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'profiles', pathMatch: 'full' },\n          {\n            path: 'profiles',\n            component: MsList,\n            data: {\n              icon: 'groups',\n              reuse: true,\n              // icon: 'list',\n              actions: [\n                {\n                  component: ProfileStatusComponent,\n                  type: 'edit',\n                },\n              ],\n            },\n          },\n          {\n            path: 'events',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'local_activity',\n              actions: [\n                {\n                  // component: EventFormComponent,\n                  component: QrcodeComponent,\n                  type: 'verify',\n                },\n                {\n                  // component: EventFormComponent,\n                  component: QrcodeComponent,\n                  type: 'code',\n                },\n              ],\n              multiple: true,\n              event: true, //temporary\n              animation: 'One',\n            },\n          },\n          {\n            path: 'events/:id',\n            data: {\n              icon: 'local_activity',\n              dialog: true,\n            },\n            children: [\n              { path: '', redirectTo: 'items', pathMatch: 'full' },\n              {\n                path: 'items',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  actions: [\n                    {\n                      component: EventFormComponent,\n                      type: 'add',\n                      icon: 'add',\n                    },\n                    {\n                      component: EventFormComponent,\n                      type: 'edit',\n                    },\n                  ],\n                  event: true, //temporary\n                  animation: 'One1',\n                },\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    path: 'promotions',\n    component: MsList,\n    data: {\n      reuse: true,\n      icon: 'campaign',\n      actions: [\n        {\n          component: CampaignFormComponent,\n          type: 'add',\n          icon: 'add',\n        },\n        {\n          component: CampaignFormComponent,\n          type: 'edit',\n        },\n      ],\n    },\n    children: [\n      {\n        path: 'templates/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n                {\n                  component: EventFormComponent,\n                  type: 'edit',\n                },\n              ],\n              event: true, //temporary\n            },\n          },\n        ],\n      },\n    ],\n  },\n  {\n    path: 'promotions/:id',\n    data: {\n      icon: 'insert_invitation',\n      dialog: true,\n    },\n    children: [\n      { path: '', redirectTo: 'events', pathMatch: 'full' },\n      {\n        path: 'events',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'list',\n          event: true, //temporary\n          animation: 'One1',\n          actions: [\n            {\n              component: EventFormComponent,\n              type: 'edit',\n            },\n          ],\n        },\n      },\n      {\n        path: 'events/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'list',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n                {\n                  component: EventFormComponent,\n                  type: 'edit',\n                },\n              ],\n              event: true, //temporary\n              animation: 'One1',\n            },\n          },\n          {\n            path: 'members',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'groups',\n              animation: 'One',\n              actions: [\n                {\n                  component: BasketComponent,\n                  type: 'add',\n                  icon: 'add',\n                  multiple: true,\n                  // only profiles - members url part will be replaced by profiles\n                  url: '/games/rate_met', // backend call - not rate_met, filter out already added members\n                },\n              ],\n            },\n            children: [\n              { path: '', redirectTo: 'schools', pathMatch: 'full' },\n              {\n                path: 'schools',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  animation: 'One1',\n                },\n              },\n            ],\n          },\n          {\n            path: 'feedbacks',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'feedback_ext',\n              actions: [\n                {\n                  component: FeedbackFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n                {\n                  component: FeedbackFormComponent,\n                  type: 'edit',\n                },\n              ],\n            },\n          },\n        ],\n      },\n      {\n        path: 'members',\n        component: MsList,\n        data: {\n          animation: 'One',\n          reuse: true,\n          icon: 'groups',\n        },\n        children: [\n          { path: '', redirectTo: 'schools', pathMatch: 'full' },\n          {\n            path: 'schools',\n            component: MsList,\n            data: {\n              reuse: true,\n              animation: 'One1',\n            },\n          },\n        ],\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BusinessRoutingModule {}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { EditorComponent } from '../../editor/editor.component';\n\n@Component({\n  selector: 'app-car',\n  templateUrl: './car.component.html',\n})\nexport class CarFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  images: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<CarFormComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.data = data.value ? data.value : { images: [] };\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        regNum: [this.data.regNum, Validators.required],\n        make: [this.data.make, Validators.required],\n        model: [this.data.model, Validators.required],\n        color: [this.data.color, Validators.required],\n        year: [\n          this.data.year,\n          [Validators.required, Validators.pattern('^[0-9]{4}$')],\n        ],\n        capacity: [\n          this.data.capacity,\n          [Validators.required, Validators.pattern('^[0-9]+$')],\n        ],\n      }),\n      images: [\n        [...this.data.images],\n        [Validators.required, Validators.minLength(1)],\n      ],\n    });\n\n    this.images = (this.data.images as Array<string>).map(\n      (image) =>\n        location.origin + '/backend' + this.url + '/images/' + image['name']\n    );\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(EditorComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        idx,\n        src:\n          this.images[idx] !== undefined\n            ? this.images[idx].split('?')[0] + '_orig'\n            : this.images[idx],\n        value: this.formGroup.controls['images'].value[idx],\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(result);\n      if (result !== undefined) {\n        const images = this.formGroup.controls['images'].value;\n        images[result.idx] = { name: result.id, mtx: result.mtx };\n        this.formGroup.controls['images'].setValue(images);\n        this.data.images[result.idx] = images[result.idx];\n\n        this.images = (this.data.images as Array<string>).map(\n          (image) =>\n            location.origin +\n            '/backend' +\n            this.url +\n            '/images/' +\n            image['name'] +\n            '?' +\n            Date.now()\n        );\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      raw.data.images = raw.images;\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Personal data</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Registration number</mat-label>\n          <input\n            matInput\n            [formControlName]=\"'regNum'\"\n            placeholder=\"e.g. SA-335CO\"\n          />\n          <mat-error *ngIf=\"formGroup.controls.data.get('regNum').invalid\"\n            >Registration Number is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Make</mat-label>\n          <input matInput [formControlName]=\"'make'\" placeholder=\"e.g. Ford\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('make').invalid\"\n            >Make is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Model</mat-label>\n          <input\n            matInput\n            [formControlName]=\"'model'\"\n            placeholder=\"e.g. Focus\"\n          />\n          <mat-error *ngIf=\"formGroup.controls.data.get('model').invalid\"\n            >Model is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Color</mat-label>\n          <input matInput [formControlName]=\"'color'\" placeholder=\"e.g. blue\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('color').invalid\"\n            >Color is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Year</mat-label>\n          <input\n            matInput\n            [formControlName]=\"'year'\"\n            placeholder=\"e.g. 1992\"\n            maxlength=\"4\"\n          />\n          <mat-error *ngIf=\"formGroup.controls.data.get('year').invalid\"\n            >Year is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Capacity</mat-label>\n          <input matInput [formControlName]=\"'capacity'\" maxlength=\"4\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('capacity').invalid\"\n            >Capacity is required!</mat-error\n          >\n        </mat-form-field>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.images.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Images</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <mat-card\n          matRipple\n          default\n          *ngFor=\"let n of numSequence(1); let i = index\"\n          (click)=\"openDialog(i)\"\n        >\n          <img *ngIf=\"images.length > i\" mat-card-image [src]=\"images[i]\" />\n        </mat-card>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA\n} from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\nimport { HttpService } from 'src/app/services/http.service';\n\nconst DESC_MIN = 10;\nconst DESC_MAX = 160;\n@Component({\n  selector: 'app-profule-status',\n  templateUrl: './profile-status.component.html',\n})\nexport class ProfileStatusComponent implements OnInit {\n  formGroup: FormGroup;\n\n  roles: any;\n  statuses: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<ProfileStatusComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    private dataService: DataService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.roles = this.dataService.roles;\n    this.statuses = this.dataService.profileStatuses;\n\n    this.data = data.value ? data.value : {};\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        role: [this.data.role, Validators.required],\n        status: [this.data.status, Validators.required],\n      }),\n    });\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      const raw = this.formGroup.getRawValue();\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Info</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Role</mat-label>\n          <mat-select [formControlName]=\"'role'\">\n            <mat-option *ngFor=\"let role of roles\" [value]=\"role.value\">\n              {{ role.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Status</mat-label>\n          <mat-select [formControlName]=\"'status'\">\n            <mat-option *ngFor=\"let status of statuses\" [value]=\"status.value\">\n              {{ status.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-event',\n  templateUrl: './event.component.html',\n})\nexport class EventComponent implements OnInit {\n  constructor(public dialogRef: MatDialogRef<EventComponent>) {}\n\n  ngOnInit(): void {}\n\n  onClick(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  Event\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from '../../../services/data.service';\n\n@Component({\n  selector: 'app-reward',\n  templateUrl: './reward.component.html',\n})\nexport class RewardComponent implements OnInit {\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  rewards: any;\n\n  constructor(\n    public dialogRef: MatDialogRef<RewardComponent>,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    const params = new HttpParams();\n\n    this.httpService.get(this.url + '/rewards', params).subscribe({\n      next: (result) => {\n        this.rewards = result;\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div>\n  <fieldset *ngFor=\"let reward of rewards\">\n    <legend>{{reward.name}}</legend>\n    <b>People invited:</b> {{reward.cnt}}\n  </fieldset>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\nimport { HttpService } from 'src/app/services/http.service';\nimport { EditorComponent } from '../../editor/editor.component';\n\nconst DESC_MIN = 10;\nconst DESC_MAX = 160;\n@Component({\n  selector: 'app-group',\n  templateUrl: './group.component.html',\n})\nexport class GroupFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  images: any;\n\n  types: any;\n  visibilities: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<GroupFormComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    private dataService: DataService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n\n    this.types = this.dataService.groupTypes;\n    this.visibilities = this.dataService.groupVisibilities;\n\n    this.data = data.value ? data.value : { images: [] };\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        type: [this.data.type, Validators.required],\n        visibility: [this.data.visibility, Validators.required],\n        name: [this.data.name, Validators.required],\n        desc: [\n          this.data.desc !== undefined ? this.data.desc : '',\n          [\n            Validators.required,\n            Validators.minLength(DESC_MIN),\n            Validators.maxLength(DESC_MAX),\n          ],\n        ],\n      }),\n      images: [\n        [...this.data.images],\n        [Validators.required, Validators.minLength(1)],\n      ],\n    });\n\n    this.images = (this.data.images as Array<string>).map(\n      (image) =>\n        location.origin + '/backend' + this.url + '/images/' + image['name']\n    );\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(EditorComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        idx,\n        src:\n          this.images[idx] !== undefined\n            ? this.images[idx].split('?')[0] + '_orig'\n            : this.images[idx],\n        value: this.formGroup.controls['images'].value[idx],\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        const images = this.formGroup.controls['images'].value;\n        images[result.idx] = { name: result.id, mtx: result.mtx };\n        this.formGroup.controls['images'].setValue(images);\n        this.data.images[result.idx] = images[result.idx];\n\n        this.images = (this.data.images as Array<string>).map(\n          (image) =>\n            location.origin +\n            '/backend' +\n            this.url +\n            '/images/' +\n            image['name'] +\n            '?' +\n            Date.now()\n        );\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      raw.data.images = raw.images;\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Group data</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Type</mat-label>\n          <mat-select [formControlName]=\"'type'\">\n            <mat-option *ngFor=\"let type of types\" [value]=\"type.value\">\n              {{ type.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Visibility</mat-label>\n          <mat-select [formControlName]=\"'visibility'\">\n            <mat-option *ngFor=\"let visibility of visibilities\" [value]=\"visibility.value\">\n              {{ visibility.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Enter name</mat-label>\n          <input matInput [formControlName]=\"'name'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('name').invalid\"\n            >Name is required!</mat-error\n          >\n        </mat-form-field>\n        <fieldset>\n          <legend>Description (min. 10, max. 160)</legend>\n          <div legend-right>\n            {{ formGroup.controls.data.get('desc').value.length }}\n          </div>\n          <mat-form-field>\n            <textarea\n              matInput\n              [formControlName]=\"'desc'\"\n              rows=\"5\"\n              maxlength=\"160\"\n            ></textarea>\n            <mat-error *ngIf=\"formGroup.controls.data.get('desc').invalid\"\n              >Description is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.images.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Images</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <mat-card\n          matRipple\n          default\n          *ngFor=\"let n of numSequence(1); let i = index\"\n          (click)=\"openDialog(i)\"\n        >\n          <img *ngIf=\"images.length > i\" mat-card-image [src]=\"images[i]\" />\n        </mat-card>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n"]}