{"version":3,"sources":["webpack:///src/app/dating/components/forms/event/event.component.ts","webpack:///src/app/dating/components/forms/event/event.component.html","webpack:///src/app/dating/components/forms/profile/profile.component.ts","webpack:///src/app/dating/components/forms/profile/profile.component.html","webpack:///src/app/dating/components/forms/group/group.component.ts","webpack:///src/app/dating/components/forms/group/group.component.html","webpack:///src/app/dating/components/help/help.component.ts","webpack:///src/app/dating/components/help/help.component.html","webpack:///src/app/dating/components/forms/car/car.component.ts","webpack:///src/app/dating/components/forms/car/car.component.html","webpack:///src/app/dating/dating-routing.module.ts","webpack:///src/app/dating/components/editor/editor.component.ts","webpack:///src/app/dating/components/editor/editor.component.html","webpack:///src/app/dating/components/forms/event-filter/event-filter.component.ts","webpack:///src/app/dating/components/forms/event-filter/event-filter.component.html","webpack:///src/app/dating/components/forms/promotion-filter/promotion-filter.component.ts","webpack:///src/app/dating/components/forms/promotion-filter/promotion-filter.component.html","webpack:///src/app/dating/components/forms/setting/setting.component.ts","webpack:///src/app/dating/components/forms/setting/setting.component.html","webpack:///src/app/dating/components/index.ts","webpack:///src/app/dating/components/forms/index.ts","webpack:///src/app/dating/components/reward/reward.component.ts","webpack:///src/app/dating/components/reward/reward.component.html","webpack:///src/app/dating/dating.module.ts","webpack:///src/app/dating/components/panel/panel.component.ts","webpack:///src/app/dating/components/panel/panel.component.html","webpack:///src/app/dating/components/event/event.component.ts","webpack:///src/app/dating/components/event/event.component.html","webpack:///src/app/dating/components/qrcode/qrcode.component.ts","webpack:///src/app/dating/components/qrcode/qrcode.component.html","webpack:///src/app/dating/components/basket/basket.component.ts","webpack:///src/app/dating/components/basket/basket.component.html","webpack:///src/app/dating/components/forms/feedback/feedback.component.ts","webpack:///src/app/dating/components/forms/feedback/feedback.component.html"],"names":["DESC_MIN","DESC_MAX","EventFormComponent","fb","dialogRef","data","dataService","httpService","progress","mode","value","color","isPriority","isMain","category","categories","eventCategories","currencies","extra","undefined","main","isAdd","url","indexOf","types","eventTypes","filter","obj","type","amount","validators","Array","push","required","pattern","chatKeyValidators","chatUrlValidators","validatorsForChatKey","offset","Date","getTimezoneOffset","dateFrom","now","isoDateFrom","toISOString","substring","setMinutes","getMinutes","isoDateTo","formGroup","group","optional","ticket","chatKey","disabled","position","x","y","name","urlRef","range","start","end","validator","DateTimeRangeValidator","capacity","min","max","RangeValidator","desc","minLength","maxLength","telNum","priority","rule","balanced","met","rate","expense","currency","event","controls","clearValidators","setValidators","updateValueAndValidity","valid","raw","getRawValue","key","split","map","item","trim","save","subscribe","next","console","log","close","error","complete","back","onClick","onTypeChange","control","get","startS","endS","AUDIO_LENGTH","ProfileComponent","dialog","navService","domSanitizer","isPlay","isRecord","recordPos","playPos","playLimit","professions","physiques","religions","languages","statuses","firstName","gender","birthday","smoker","marital","hasChild","height","physique","religion","profession","status","images","voice","image","location","origin","voiceUrl","evt","n","img","idx","open","maxWidth","maxHeight","width","src","afterClosed","result","id","mtx","setValue","pos","formData","FormData","profile","Blob","JSON","stringify","append","voiceData","navigator","mediaDevices","getUserMedia","audio","then","stream","chunks","recorder","MediaRecorder","ondataavailable","e","state","blob","bypassSecurityTrustUrl","URL","createObjectURL","interval","setInterval","setTimeout","clearInterval","stop","voiceObj","nativeElement","method","currentTime","onHeight","record","play","updateTime","ended","GroupFormComponent","regNum","make","model","year","HelpComponent","CarFormComponent","help","routes","path","redirectTo","pathMatch","reuse","icon","children","component","actions","multiple","animation","DatingRoutingModule","forChild","EditorComponent","eventBusService","size","canvas","load","edited","file","upload","UploadProgress","Math","round","loaded","total","Response","body","reader","FileReader","onload","target","files","readAsDataURL","rotate","emit","degree","selectFile","EventFilterComponent","city","free","PromotionFilterComponent","templateTypes","rated","SettingComponent","router","groups","params","init","findIndex","selected","current","viewValue","system","onSelect","openConfirmation","msg","btn","groupForm","groupType","groupTypes","groupName","notif","like","root","navigate","auth","signOut","reset","RewardComponent","rewards","DatingModule","injector","create","providers","provide","deps","PanelComponent","cfr","activatedRoute","transformService","snapshot","itemUrl","componentFactory","resolveComponentFactory","transform","instance","onEnter","show","panelRef","insert","hostView","comp","share","title","text","alert","openDialog","sub","unsubscribe","v","EventComponent","QrcodeComponent","camera","qrCode","post","code","on","onScanned","BasketComponent","items","replace","length","keys","info","selectedIdx","overlayData","splice","onBasket","hasOwnProperty","onDelete","FeedbackFormComponent","onRate"],"mappings":"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","file":"dating-dating-module-es5.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\nimport { HttpService } from 'src/app/services/http.service';\n\nconst DESC_MIN = 10;\nconst DESC_MAX = 160;\n\n@Component({\n  selector: 'app-event',\n  templateUrl: './event.component.html',\n})\nexport class EventFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  categories: any;\n  currencies: any;\n  types: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  isAdd: any;\n\n  isPriority = true;\n\n  isMain = true;\n\n  category = 'l';\n\n  // main event flag - only one main event does exist, which contains assign car and signal chat group\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<EventFormComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dataService: DataService,\n    private httpService: HttpService\n  ) {\n    this.categories = this.dataService.eventCategories;\n    this.currencies = this.dataService.currencies;\n\n    if (data.extra !== undefined) {\n      if (data.extra.main !== undefined) {\n        this.isMain = data.isAdd ? false : data.extra.main;\n      }\n\n      if (data.extra.category !== undefined) {\n        this.category = data.extra.category;\n      }\n    }\n\n    if (data.url.indexOf('items') === -1) {\n      this.types = this.dataService.eventTypes.filter((obj) => {\n        return obj.value === 'g';\n      });\n    } else {\n      this.types = this.dataService.eventTypes;\n    }\n\n    if (data.url.indexOf('promotions') !== -1) {\n      this.isPriority = false;\n    }\n\n    this.data = data.value ? data.value : { type: 'g', amount: {} };\n    this.url = data.url;\n  }\n\n  validatorsForChatKey(type) {\n    const validators = new Array();\n    if (type === 'g') {\n      validators.push(Validators.required);\n    }\n\n    validators.push(\n      Validators.pattern(\n        '^https?://(www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@,!:%_+.~#?&//=]*)$'\n      )\n    );\n    return validators;\n  }\n\n  // if random, then you can set activity profile date from and you rated greater than\n  ngOnInit(): void {\n    const chatKeyValidators = new Array();\n\n    chatKeyValidators.push(\n      Validators.pattern(\n        '^https?://(www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@,!:%_+.~#?&//=]*)$'\n      )\n    );\n\n    const chatUrlValidators = this.validatorsForChatKey(this.data.type);\n\n    const offset = new Date().getTimezoneOffset() * 60000;\n    const dateFrom = new Date(Date.now() - offset);\n    const isoDateFrom = dateFrom.toISOString().substring(0, 16);\n    dateFrom.setMinutes(dateFrom.getMinutes() + 1);\n    const isoDateTo = dateFrom.toISOString().substring(0, 16);\n\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        type: [this.data.type, Validators.required],\n        optional: [\n          this.data.optional ? this.data.optional : false,\n          Validators.required,\n        ],\n        ticket: [\n          this.data.ticket ? this.data.ticket : false,\n          Validators.required,\n        ],\n        chatKey: [this.data.chatKey, [...chatUrlValidators]],\n        category: [\n          {\n            value:\n              this.category !== undefined ? this.category : this.data.category,\n            disabled: !this.isMain,\n          },\n          Validators.required,\n        ],\n        position: [\n          this.data.position !== undefined\n            ? this.data.position.x + ', ' + this.data.position.y\n            : '',\n          Validators.required,\n        ],\n        name: [this.data.name, Validators.required],\n        urlRef: [this.data.urlRef, [...chatKeyValidators]], // google\n        range: this.fb.group(\n          {\n            start: [\n              this.data.range\n                ? this.data.range.start.substring(0, 16)\n                : isoDateFrom,\n              Validators.required,\n            ],\n            end: [\n              this.data.range\n                ? this.data.range.end.substring(0, 16)\n                : isoDateFrom,\n              Validators.required,\n            ],\n          },\n          { validator: DateTimeRangeValidator }\n        ),\n        capacity: this.fb.group(\n          {\n            min: [\n              this.data.capacity ? this.data.capacity.min : 0,\n              Validators.required,\n            ],\n            max: [\n              this.data.capacity ? this.data.capacity.max : 0,\n              Validators.required,\n            ],\n          },\n          { validator: RangeValidator }\n        ),\n        desc: [\n          this.data.desc !== undefined ? this.data.desc : '',\n          [\n            Validators.required,\n            Validators.minLength(DESC_MIN),\n            Validators.maxLength(DESC_MAX),\n          ],\n        ],\n        telNum: [\n          this.data.telNum,\n          this.data.type === 'c' ? Validators.required : undefined,\n        ],\n        priority: [\n          this.data.priority ? this.data.priority : false,\n          Validators.required,\n        ],\n      }),\n      rule: this.fb.group({\n        balanced: [\n          this.data.rule && this.data.rule.balanced\n            ? this.data.rule.balanced\n            : false,\n          Validators.required,\n        ],\n        met: [\n          this.data.rule && this.data.rule.met ? this.data.rule.met : false,\n          Validators.required,\n        ],\n        rate: [\n          this.data.rule && this.data.rule.rate ? this.data.rule.rate : 0,\n          [Validators.required, Validators.pattern('^[0-9]+$')],\n        ],\n        range: this.fb.group(\n          {\n            start: [\n              this.data.rule && this.data.rule.range\n                ? this.data.rule.range.start\n                : undefined,\n            ],\n            end: [\n              this.data.rule && this.data.rule.range\n                ? this.data.rule.range.end\n                : undefined,\n            ],\n          },\n          { validator: DateTimeRangeValidator }\n        ),\n      }),\n      expense: this.fb.group({\n        amount: this.fb.group({\n          value: [\n            this.data.amount.value,\n            [\n              Validators.required,\n              Validators.pattern('^[0-9]+[\\\\.]?[0-9]{0,}$'),\n            ],\n          ],\n          currency: [this.data.amount.currency, Validators.required],\n        }),\n      }),\n    });\n  }\n\n  onTypeChange(event) {\n    (this.formGroup.controls['data'] as FormGroup).controls[\n      'chatKey'\n    ].clearValidators();\n\n    const chatUrlValidators = this.validatorsForChatKey(event.value);\n    (this.formGroup.controls['data'] as FormGroup).controls[\n      'chatKey'\n    ].setValidators([...chatUrlValidators]);\n\n    (this.formGroup.controls['data'] as FormGroup).controls[\n      'chatKey'\n    ].updateValueAndValidity();\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      const raw = this.formGroup.getRawValue();\n      raw.data.amount = raw.expense.amount;\n      raw.data.rule = raw.rule;\n      raw.data.key = this.data.key;\n\n      raw.data.position = raw.data.position\n        .split(',')\n        .map((item) => item.trim());\n\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          console.log(value);\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n\nconst RangeValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const min = control.get('min').value;\n  const max = control.get('max').value;\n\n  return min <= max ? null : { range: true };\n};\n\nconst DateTimeRangeValidator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null => {\n  const startS = control.get('start').value;\n  const endS = control.get('end').value;\n\n  let start;\n  if (startS !== null) {\n    start = new Date(startS);\n  }\n\n  let end;\n  if (endS !== null) {\n    end = new Date(endS);\n  }\n\n  return start === undefined || end === undefined || start < end\n    ? null\n    : { range: true };\n};\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Info</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Type</mat-label>\n          <mat-select\n            [formControlName]=\"'type'\"\n            (selectionChange)=\"onTypeChange($event)\"\n          >\n            <mat-option *ngFor=\"let type of types\" [value]=\"type.value\">\n              {{ type.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Enter name</mat-label>\n          <input matInput [formControlName]=\"'name'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('name').invalid\"\n            >Name is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field\n          *ngIf=\"formGroup.controls.data.get('type').value === 'g'\"\n        >\n          <mat-label>Enter Chat Url</mat-label>\n          <input matInput [formControlName]=\"'chatKey'\" type=\"url\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('chatKey').invalid\"\n            >Chat url is required!</mat-error\n          >\n        </mat-form-field>\n        <fieldset>\n          <legend>Location</legend>\n          <mat-form-field>\n            <mat-label>Category</mat-label>\n            <mat-select [formControlName]=\"'category'\">\n              <mat-option\n                *ngFor=\"let category of categories\"\n                [value]=\"category.value\"\n              >\n                {{ category.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Enter Location (latitude,longitude)</mat-label>\n            <div class=\"btn_form_bar\">\n              <div class=\"btn_form\">\n                <div class=\"map container\">\n                  <a href=\"https://maps.google.com\" target=\"_blank\">\n                    <img class=\"img\" />\n                  </a>\n                </div>\n              </div>\n            </div>\n            <input matInput [formControlName]=\"'position'\" />\n            <mat-error *ngIf=\"formGroup.controls.data.get('position').invalid\"\n              >Position is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Reference link (Google, Booking etc.)</mat-label>\n            <input matInput [formControlName]=\"'urlRef'\" />\n            <mat-error *ngIf=\"formGroup.controls.data.get('urlRef').invalid\"\n              >Address is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n        <fieldset formGroupName=\"range\">\n          <legend>Time</legend>\n          <mat-form-field>\n            <mat-label>From</mat-label>\n            <input matInput formControlName=\"start\" type=\"datetime-local\" />\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>To</mat-label>\n            <input matInput formControlName=\"end\" type=\"datetime-local\" />\n          </mat-form-field>\n          <mat-error *ngIf=\"formGroup.controls.data.get('range').invalid\"\n            >Invalid Range</mat-error\n          >\n        </fieldset>\n        <mat-slide-toggle\n          *ngIf=\"!isMain\"\n          [formControlName]=\"'optional'\"\n          labelPosition=\"before\"\n          >Optional</mat-slide-toggle\n        >\n        <fieldset formGroupName=\"capacity\" *ngIf=\"isMain || formGroup.controls.data.get('optional').value\">\n          <legend>Capacity</legend>\n          <mat-form-field>\n            <mat-label>Min</mat-label>\n            <input matInput formControlName=\"min\" type=\"number\" />\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Max</mat-label>\n            <input matInput formControlName=\"max\" type=\"number\" />\n          </mat-form-field>\n          <mat-error *ngIf=\"formGroup.controls.data.get('capacity').invalid\"\n            >Invalid Range</mat-error\n          >\n        </fieldset>\n        <fieldset>\n          <legend>Description (min. 10, max. 160)</legend>\n          <div legend-right>\n            {{ formGroup.controls.data.get('desc').value.length }}\n          </div>\n          <mat-form-field>\n            <textarea\n              matInput\n              [formControlName]=\"'desc'\"\n              rows=\"5\"\n              maxlength=\"160\"\n            ></textarea>\n            <mat-error *ngIf=\"formGroup.controls.data.get('desc').invalid\"\n              >Description is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n        <mat-form-field\n          *ngIf=\"\n            formGroup.controls.data.get('type').value === 'c' ||\n            formGroup.controls.data.get('type').value === 'g'\n          \"\n        >\n          <mat-label>Enter Telephone Number</mat-label>\n          <input matInput [formControlName]=\"'telNum'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('telNum').invalid\"\n            >Telephone Number is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-slide-toggle [formControlName]=\"'ticket'\" labelPosition=\"before\"\n          >Ticket</mat-slide-toggle\n        >\n        <mat-slide-toggle *ngIf=\"isPriority && isMain\" [formControlName]=\"'priority'\" labelPosition=\"before\"\n          >Priority</mat-slide-toggle\n        >\n      </mat-expansion-panel>\n      <mat-expansion-panel\n        formGroupName=\"rule\"\n        *ngIf=\"formGroup.controls.data.get('priority').value\"\n      >\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.rule.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Rule</mat-panel-title>\n        </mat-expansion-panel-header>\n        <div>\n          <mat-slide-toggle\n            [formControlName]=\"'balanced'\"\n            labelPosition=\"before\"\n            >Balanced Female/Male Ratio</mat-slide-toggle\n          >\n          <mat-form-field>\n            <mat-label>Rate From</mat-label>\n            <input matInput [formControlName]=\"'rate'\" />\n            <mat-error *ngIf=\"formGroup.controls.rule.get('rate').invalid\"\n              >Value is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-slide-toggle [formControlName]=\"'met'\" labelPosition=\"before\"\n            >Has already met</mat-slide-toggle\n          >\n          <fieldset formGroupName=\"range\">\n            <legend>Time</legend>\n            <mat-form-field>\n              <mat-label>Date After</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"pickerStart\"\n                formControlName=\"start\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"pickerStart\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #pickerStart></mat-datepicker>\n            </mat-form-field>\n            <mat-form-field>\n              <mat-label>Date Before</mat-label>\n              <input\n                matInput\n                [matDatepicker]=\"pickerEnd\"\n                formControlName=\"end\"\n              />\n              <mat-datepicker-toggle\n                matSuffix\n                [for]=\"pickerEnd\"\n              ></mat-datepicker-toggle>\n              <mat-datepicker #pickerEnd></mat-datepicker>\n            </mat-form-field>\n            <mat-error *ngIf=\"formGroup.controls.rule.get('range').invalid\"\n              >Invalid Range</mat-error\n            >\n          </fieldset>\n        </div>\n      </mat-expansion-panel>\n      <mat-expansion-panel formGroupName=\"expense\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.expense.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Expense</mat-panel-title>\n        </mat-expansion-panel-header>\n        <fieldset formGroupName=\"amount\">\n          <legend>Amount</legend>\n          <mat-form-field>\n            <mat-label>eg. 12.34</mat-label>\n            <input matInput [formControlName]=\"'value'\" />\n            <mat-error\n              *ngIf=\"\n                formGroup.controls.expense.get('amount').get('value').invalid\n              \"\n              >Value is required!</mat-error\n            >\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Currency</mat-label>\n            <mat-select [formControlName]=\"'currency'\">\n              <mat-option\n                *ngFor=\"let currency of currencies\"\n                [value]=\"currency.value\"\n              >\n                {{ currency.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </fieldset>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import {\n  Component,\n  ElementRef,\n  Inject,\n  OnInit,\n  ViewChild\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA\n} from '@angular/material/dialog';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from 'src/app/services/data.service';\nimport { NavigationService } from 'src/app/navigation.service';\nimport { EditorComponent } from '../../editor/editor.component';\n\nconst AUDIO_LENGTH = 10000;\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n})\nexport class ProfileComponent implements OnInit {\n  formGroup: FormGroup;\n\n  professions: any;\n  physiques: any;\n  religions: any;\n  languages: any;\n  statuses: any;\n\n  images: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  private url: any;\n\n  private pos: any;\n\n  isPlay = false;\n  isRecord = false;\n  voiceData;\n  interval;\n\n  recordPos = 0;\n  playPos = 0;\n  playLimit = AUDIO_LENGTH;\n\n  voiceUrl: any;\n\n  @ViewChild('voiceObj', { static: true }) voiceObj: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<ProfileComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private navService: NavigationService,\n    private httpService: HttpService,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.professions = this.dataService.professions;\n    this.physiques = this.dataService.physiques;\n    this.religions = this.dataService.religions;\n    this.languages = this.dataService.languages;\n    this.statuses = this.dataService.statuses;\n\n    this.data = data.value['profile'];\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        firstName: [this.data.firstName, Validators.required],\n        gender: [this.data.gender],\n        birthday: [new Date(this.data.birthday), [Validators.required]],\n        smoker: [this.data.smoker],\n        marital: [this.data.marital],\n        hasChild: [this.data.hasChild],\n        height: [this.data.height],\n        physique: [this.data.physique],\n        languages: [[...this.data.languages]],\n        religion: [this.data.religion],\n        profession: [this.data.profession],\n        status: [this.data.status !== undefined ? this.data.status : 'I'],\n      }),\n      images: [\n        [...this.data.images],\n        [Validators.required, Validators.minLength(3)],\n      ],\n      voice: [this.data.voice],\n    });\n\n    this.images = (this.data.images as Array<string>).map(\n      (image) =>\n        location.origin + '/backend' + this.url + '/images/' + image['name']\n    );\n\n    this.voiceUrl = location.origin + '/backend' + this.url + '/voice/' + this.data.voice;\n  }\n\n  onHeight(evt): void {\n    this.data.height = evt.value;\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  noCache(img) {\n    return img + '?' + Date.now();\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(EditorComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        idx,\n        src:\n          this.images[idx] !== undefined\n            ? this.images[idx].split('?')[0] + '_orig'\n            : this.images[idx],\n        value: this.formGroup.controls['images'].value[idx],\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        const images = this.formGroup.controls['images'].value;\n        images[result.idx] = { name: result.id, mtx: result.mtx };\n        this.formGroup.controls['images'].setValue(images);\n        this.data.images[result.idx] = images[result.idx];\n\n        this.images = (this.data.images as Array<string>).map(\n          (image) =>\n            location.origin +\n            '/backend' +\n            this.url +\n            '/images/' +\n            image['name'] +\n            '?' +\n            Date.now()\n        );\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      raw.data.position = this.navService.pos;\n      raw.data.images = raw.images;\n\n      const formData = new FormData();\n\n      const profile = new Blob([JSON.stringify(raw.data)], {\n        type: 'application/json',\n      });\n      formData.append('profile', profile);\n\n      if (this.voiceData !== undefined) {\n        formData.append('voice', this.voiceData);\n      }\n\n      this.httpService.save(this.url, formData).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    // stale value !!!\n    this.dialogRef.close();\n  }\n\n  record(): void {\n    if (this.isRecord) {\n      return;\n    }\n    // check/request permission on android\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        const chunks = [];\n        /*var options = {\n              audioBitsPerSecond : 128000,\n              videoBitsPerSecond : 2500000,\n              mimeType : 'video/mp4'\n              }*/\n        const recorder = new MediaRecorder(stream /*,options*/);\n\n        recorder.ondataavailable = (e) => {\n          chunks.push(e.data);\n\n          if (recorder.state === 'inactive') {\n            // ;codecs=h264 can be used to be able to play on ios\n            const blob = new Blob(chunks, { type: 'audio/webm' });\n            this.voiceData = blob;\n            this.voiceUrl = this.domSanitizer.bypassSecurityTrustUrl(\n              URL.createObjectURL(blob)\n            );\n          }\n        };\n\n        recorder.start();\n        this.isRecord = true;\n\n        this.interval = setInterval(() => {\n          this.recordPos++;\n        }, 500);\n\n        setTimeout(() => {\n          setTimeout(() => {\n            this.recordPos = 0;\n            this.isRecord = false;\n          }, 500);\n\n          clearInterval(this.interval);\n          recorder.stop();\n        }, AUDIO_LENGTH);\n      })\n      .catch(console.error);\n  }\n\n  play(): void {\n    if (this.voiceObj === undefined || this.isPlay) {\n      return;\n    }\n\n    this.isPlay = true;\n\n    this.voiceObj.nativeElement['load']();\n\n    const method = this.isPlay ? 'play' : 'pause';\n    this.voiceObj.nativeElement[method]();\n  }\n\n  updateTime(evt): void {\n    this.playPos = this.voiceObj.nativeElement.currentTime * 1000;\n  }\n\n  ended(evt): void {\n    this.isPlay = false;\n    this.playPos = 0;\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Personal data</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Status</mat-label>\n          <mat-select [formControlName]=\"'status'\">\n            <mat-option *ngFor=\"let status of statuses\" [value]=\"status.value\">\n              {{ status.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Enter your first name</mat-label>\n          <input matInput [formControlName]=\"'firstName'\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('firstName').invalid\"\n            >First name is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Choose your birthday</mat-label>\n          <input\n            matInput\n            [matDatepicker]=\"picker\"\n            [formControlName]=\"'birthday'\"\n          />\n          <mat-datepicker-toggle\n            matSuffix\n            [for]=\"picker\"\n          ></mat-datepicker-toggle>\n          <mat-datepicker #picker></mat-datepicker>\n        </mat-form-field>\n        <fieldset>\n          <legend>Gender</legend>\n          <mat-radio-group [formControlName]=\"'gender'\">\n            <mat-radio-button value=\"m\">Man</mat-radio-button>\n            <mat-radio-button value=\"w\">Woman</mat-radio-button>\n          </mat-radio-group>\n        </fieldset>\n        <fieldset>\n          <legend>Marital Status</legend>\n          <mat-radio-group [formControlName]=\"'marital'\">\n            <mat-radio-button value=\"s\">Single</mat-radio-button>\n            <mat-radio-button value=\"t\">Taken</mat-radio-button>\n          </mat-radio-group>\n        </fieldset>\n        <mat-slide-toggle [formControlName]=\"'smoker'\" labelPosition=\"before\"\n          >Smoker</mat-slide-toggle\n        >\n        <mat-slide-toggle [formControlName]=\"'hasChild'\" labelPosition=\"before\"\n          >Child</mat-slide-toggle\n        >\n        <fieldset>\n          <legend>Height</legend>\n          <div legend-right>{{ data.height }}</div>\n          <mat-slider\n            min=\"40\"\n            max=\"250\"\n            [formControlName]=\"'height'\"\n            (input)=\"onHeight($event)\"\n          ></mat-slider>\n        </fieldset>\n        <mat-form-field>\n          <mat-label>Physique</mat-label>\n          <mat-select [formControlName]=\"'physique'\">\n            <mat-option\n              *ngFor=\"let physique of physiques\"\n              [value]=\"physique.value\"\n            >\n              {{ physique.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Languages</mat-label>\n          <mat-select [formControlName]=\"'languages'\" multiple>\n            <mat-option\n              *ngFor=\"let language of languages\"\n              [value]=\"language.value\"\n              >{{ language.viewValue }}</mat-option\n            >\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Religion</mat-label>\n          <mat-select [formControlName]=\"'religion'\">\n            <mat-option\n              *ngFor=\"let religion of religions\"\n              [value]=\"religion.value\"\n              >{{ religion.viewValue }}</mat-option\n            >\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Profession</mat-label>\n          <mat-select [formControlName]=\"'profession'\">\n            <mat-option\n              *ngFor=\"let profession of professions\"\n              [value]=\"profession.value\"\n              >{{ profession.viewValue }}</mat-option\n            >\n          </mat-select>\n        </mat-form-field>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.images.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Images</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <mat-card\n          matRipple\n          default\n          *ngFor=\"let n of numSequence(3); let i = index\"\n          (click)=\"openDialog(i)\"\n        >\n          <img *ngIf=\"images.length > i\" mat-card-image [src]=\"images[i]\" />\n        </mat-card>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.voice.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Voice</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <fieldset class=\"voice\">\n          <legend>Voice</legend>\n          <div\n            mat-button\n            matRipple\n            (click)=\"record()\"\n            style=\"margin-left: auto; border-radius: 50%\"\n          >\n            <svg\n              [style]=\"\n                '--pos:' + recordPos + ';--buff:0;--limit: 10;width:30px;'\n              \"\n              class=\"chart\"\n              viewBox=\"0 0 24 24\"\n            >\n              <g transform=\"rotate(-90 12 12)\">\n                <circle class=\"pos\" r=\"10\" cy=\"12\" cx=\"12\" />\n                <circle class=\"buff\" r=\"10\" cy=\"12\" cx=\"12\" />\n              </g>\n            </svg>\n            <mat-icon\n              mat-rate\n              [ngStyle]=\"{ color: !isPlay ? 'black' : 'gray' }\"\n              >{{ isRecord ? 'stop' : 'mic' }}</mat-icon\n            >\n          </div>\n          <div\n            mat-button\n            matRipple\n            (click)=\"play()\"\n            style=\"margin-right: auto; border-radius: 50%\"\n          >\n            <svg\n              [style]=\"\n                '--pos:' +\n                playPos +\n                ';--buff:0;--limit:' +\n                playLimit +\n                ';width:30px;'\n              \"\n              class=\"chart\"\n              viewBox=\"0 0 24 24\"\n            >\n              <g transform=\"rotate(-90 12 12)\">\n                <circle class=\"pos\" r=\"10\" cy=\"12\" cx=\"12\" />\n                <circle class=\"buff\" r=\"10\" cy=\"12\" cx=\"12\" />\n              </g>\n            </svg>\n            <mat-icon\n              mat-rate\n              [ngStyle]=\"{ color: !isRecord ? 'black' : 'gray' }\"\n              >{{ isPlay ? 'stop' : 'play_arrow' }}</mat-icon\n            >\n          </div>\n          <audio\n            #voiceObj\n            preload=\"none\"\n            (timeupdate)=\"updateTime($event)\"\n            (ended)=\"ended($event)\"\n          >\n            <source [src]=\"voiceUrl\" type=\"audio/ogg\" />\n          </audio>\n        </fieldset>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { EditorComponent } from '../../editor/editor.component';\n\n@Component({\n  selector: 'app-group',\n  templateUrl: './group.component.html',\n})\nexport class GroupFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  images: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<GroupFormComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.data = data.value ? data.value : { images: [] };\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        regNum: [this.data.regNum, Validators.required],\n        make: [this.data.make, Validators.required],\n        model: [this.data.model, Validators.required],\n        color: [this.data.color, Validators.required],\n        year: [\n          this.data.year,\n          [Validators.required, Validators.pattern('^[0-9]{4}$')],\n        ],\n        capacity: [\n          this.data.capacity,\n          [Validators.required, Validators.pattern('^[0-9]+$')],\n        ],\n      }),\n      images: [\n        [...this.data.images],\n        [Validators.required, Validators.minLength(1)],\n      ],\n    });\n\n    this.images = (this.data.images as Array<string>).map(\n      (image) =>\n        location.origin + '/backend' + this.url + '/images/' + image['name']\n    );\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(EditorComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        idx,\n        src:\n          this.images[idx] !== undefined\n            ? this.images[idx].split('?')[0] + '_orig'\n            : this.images[idx],\n        value: this.formGroup.controls['images'].value[idx],\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        const images = this.formGroup.controls['images'].value;\n        images[result.idx] = { name: result.id, mtx: result.mtx };\n        this.formGroup.controls['images'].setValue(images);\n        this.data.images[result.idx] = images[result.idx];\n\n        this.images = (this.data.images as Array<string>).map(\n          (image) =>\n            location.origin +\n            '/backend' +\n            this.url +\n            '/images/' +\n            image['name'] +\n            '?' +\n            Date.now()\n        );\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      raw.data.images = raw.images;\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Group data</mat-panel-title>\n        </mat-expansion-panel-header>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.images.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Images</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <mat-card\n          matRipple\n          default\n          *ngFor=\"let n of numSequence(1); let i = index\"\n          (click)=\"openDialog(i)\"\n        >\n          <img *ngIf=\"images.length > i\" mat-card-image [src]=\"images[i]\" />\n        </mat-card>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-help',\n  templateUrl: './help.component.html',\n})\nexport class HelpComponent {\n  constructor() {}\n}\n","Help\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { EditorComponent } from '../../editor/editor.component';\n\n@Component({\n  selector: 'app-car',\n  templateUrl: './car.component.html',\n})\nexport class CarFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  images: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<CarFormComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.data = data.value ? data.value : { images: [] };\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        regNum: [this.data.regNum, Validators.required],\n        make: [this.data.make, Validators.required],\n        model: [this.data.model, Validators.required],\n        color: [this.data.color, Validators.required],\n        year: [\n          this.data.year,\n          [Validators.required, Validators.pattern('^[0-9]{4}$')],\n        ],\n        capacity: [\n          this.data.capacity,\n          [Validators.required, Validators.pattern('^[0-9]+$')],\n        ],\n      }),\n      images: [\n        [...this.data.images],\n        [Validators.required, Validators.minLength(1)],\n      ],\n    });\n\n    this.images = (this.data.images as Array<string>).map(\n      (image) =>\n        location.origin + '/backend' + this.url + '/images/' + image['name']\n    );\n  }\n\n  help(key) {\n    console.log(key);\n  }\n\n  numSequence(n: number): Array<number> {\n    return Array(n);\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(EditorComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        idx,\n        src:\n          this.images[idx] !== undefined\n            ? this.images[idx].split('?')[0] + '_orig'\n            : this.images[idx],\n        value: this.formGroup.controls['images'].value[idx],\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result !== undefined) {\n        const images = this.formGroup.controls['images'].value;\n        images[result.idx] = { name: result.id, mtx: result.mtx };\n        this.formGroup.controls['images'].setValue(images);\n        this.data.images[result.idx] = images[result.idx];\n\n        this.images = (this.data.images as Array<string>).map(\n          (image) =>\n            location.origin +\n            '/backend' +\n            this.url +\n            '/images/' +\n            image['name'] +\n            '?' +\n            Date.now()\n        );\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      raw.data.images = raw.images;\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Personal data</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-form-field>\n          <mat-label>Registration number</mat-label>\n          <input\n            matInput\n            [formControlName]=\"'regNum'\"\n            placeholder=\"e.g. SA-335CO\"\n          />\n          <mat-error *ngIf=\"formGroup.controls.data.get('regNum').invalid\"\n            >Registration Number is required!</mat-error\n          >\n          <button class=\"help\" (click)=\"help('regNum')\">\n            <mat-icon>help</mat-icon>\n          </button>\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Make</mat-label>\n          <input matInput [formControlName]=\"'make'\" placeholder=\"e.g. Ford\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('make').invalid\"\n            >Make is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Model</mat-label>\n          <input\n            matInput\n            [formControlName]=\"'model'\"\n            placeholder=\"e.g. Focus\"\n          />\n          <mat-error *ngIf=\"formGroup.controls.data.get('model').invalid\"\n            >Model is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Color</mat-label>\n          <input matInput [formControlName]=\"'color'\" placeholder=\"e.g. blue\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('color').invalid\"\n            >Color is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Year</mat-label>\n          <input\n            matInput\n            [formControlName]=\"'year'\"\n            placeholder=\"e.g. 1992\"\n            maxlength=\"4\"\n          />\n          <mat-error *ngIf=\"formGroup.controls.data.get('year').invalid\"\n            >Year is required!</mat-error\n          >\n        </mat-form-field>\n        <mat-form-field>\n          <mat-label>Capacity</mat-label>\n          <input matInput [formControlName]=\"'capacity'\" maxlength=\"4\" />\n          <mat-error *ngIf=\"formGroup.controls.data.get('capacity').invalid\"\n            >Capacity is required!</mat-error\n          >\n        </mat-form-field>\n      </mat-expansion-panel>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.images.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Images</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <mat-card\n          matRipple\n          default\n          *ngFor=\"let n of numSequence(1); let i = index\"\n          (click)=\"openDialog(i)\"\n        >\n          <img *ngIf=\"images.length > i\" mat-card-image [src]=\"images[i]\" />\n        </mat-card>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MsList } from 'src/lib';\nimport {\n  BasketComponent,\n  CarFormComponent,\n  EventFilterComponent,\n  EventFormComponent,\n  FeedbackFormComponent,\n  PanelComponent,\n  ProfileComponent,\n  QrcodeComponent,\n  SettingComponent,\n  RewardComponent,\n  PromotionFilterComponent,\n} from './components';\n\n// filter, add, attach\nconst routes: Routes = [\n  { path: '', redirectTo: 'activity', pathMatch: 'full' },\n  {\n    path: 'activity',\n    data: {\n      reuse: true,\n      icon: 'notifications',\n    },\n    children: [\n      { path: '', redirectTo: 'events', pathMatch: 'full' },\n      {\n        path: 'events',\n        component: MsList,\n        data: {\n          reuse: true,\n          //icon: 'insert_invitation',\n          actions: [\n            /*{\n              component: EventFormComponent,\n              type: 'add',\n              icon: 'add',\n            },\n            {\n              component: QrcodeComponent,\n              type: 'verify',\n            },\n            {\n              component: QrcodeComponent,\n              type: 'code',\n            },\n            {\n              component: EventFormComponent,\n              type: 'edit',\n            },*/\n          ],\n          multiple: true,\n          event: true, //temporary\n          animation: 'One',\n          group: 'date',\n        },\n      },\n      {\n        path: 'events/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'list',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n                {\n                  component: EventFormComponent,\n                  type: 'edit',\n                },\n              ],\n              event: true, //temporary\n              animation: 'One1',\n            },\n          },\n          {\n            path: 'items/:id',\n            data: {\n              icon: 'insert_invitation',\n              dialog: true,\n            },\n            children: [\n              { path: '', redirectTo: 'members', pathMatch: 'full' },\n              {\n                path: 'members',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  animation: 'Two1',\n                },\n              },\n            ],\n          },\n          {\n            path: 'members',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'groups',\n              actions: [\n                {\n                  component: BasketComponent,\n                  type: 'add',\n                  icon: 'add',\n                  multiple: true,\n                  // only profiles - members url part will be replaced by profiles\n                  url: '/games/rate_met', // backend call - not rate_met, filter out already added members\n                },\n              ],\n            },\n          },\n          {\n            path: 'feedbacks',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'feedback_ext',\n              actions: [\n                {\n                  component: FeedbackFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n                {\n                  component: FeedbackFormComponent,\n                  type: 'edit',\n                },\n              ],\n            },\n          },\n        ],\n      },\n      /*{\n        path: 'invitations',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'mail',\n          event: true, //temporary\n          animation: 'Two',\n        },\n      },\n      {\n        path: 'invitations/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'list',\n              event: true, //temporary\n              animation: 'Two1',\n            },\n          },\n          {\n            path: 'members',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'groups',\n              actions: [],\n            },\n          },\n          {\n            path: 'feedbacks',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'feedback_ext',\n            },\n          },\n        ],\n      },\n      {\n        path: 'promotions',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'campaign',\n        },\n      },\n      {\n        path: 'promotions/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              event: true, //temporary\n              animation: 'One1',\n            },\n          },\n        ],\n      },*/\n    ],\n  },\n  /*{\n    path: 'recommendations',\n    data: {\n      reuse: true,\n      icon: 'explore',\n      animation: 'Three',\n    },\n    children: [\n      { path: '', redirectTo: 'events', pathMatch: 'full' },\n      {\n        path: 'events',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'local_activity',\n          event: true, //temporary\n          animation: 'Three1',\n        },\n      },\n      {\n        path: 'events/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'items', pathMatch: 'full' },\n          {\n            path: 'items',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'list',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n              ],\n              event: true, //temporary\n              animation: 'Three2',\n            },\n          },\n          {\n            path: 'feedbacks',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'feedback_ext',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'add',\n                  icon: 'add',\n                },\n              ],\n            },\n          },\n        ],\n      },\n      {\n        path: 'promotions',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'campaign',\n          // actions: [\n          //   // Group-Filter has the common filter settings handling - this component will be removed\n          //   {\n          //     component: PromotionFilterComponent,\n          //     type: 'filter',\n          //     icon: 'search',\n          //   },\n          // ],\n        },\n      },\n      {\n        path: 'promotions/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'events', pathMatch: 'full' },\n          {\n            path: 'events',\n            component: MsList,\n            data: {\n              reuse: true,\n              event: true, //temporary\n              animation: 'One1',\n              actions: [\n                {\n                  component: EventFormComponent,\n                  type: 'clone',\n                },\n              ],\n            },\n          },\n          {\n            path: 'events/:id',\n            data: {\n              icon: 'insert_invitation',\n              dialog: true,\n            },\n            children: [\n              { path: '', redirectTo: 'items', pathMatch: 'full' },\n              {\n                path: 'items',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  icon: 'list',\n                  event: true, //temporary\n                  animation: 'One1',\n                },\n              },\n              {\n                path: 'feedbacks',\n                component: MsList,\n                data: {\n                  reuse: true,\n                  icon: 'feedback_ext',\n                },\n              },\n            ],\n          },\n        ],\n      },\n      {\n        path: 'groups',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'groups',\n          actions: [\n            {\n              type: 'join',\n            },\n          ],\n        },\n      },\n    ],\n  },*/\n  {\n    path: 'games',\n    data: {\n      reuse: true,\n      icon: 'favorite',\n    },\n    children: [\n      { path: '', redirectTo: 'rate_none', pathMatch: 'full' },\n      {\n        path: 'rate_none',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'rate_ext_new',\n          double: true,\n          group: 'dist',\n        },\n      },\n      {\n        path: 'rate_double/:id',\n        data: {\n          icon: 'insert_invitation',\n          dialog: true,\n        },\n        children: [\n          { path: '', redirectTo: 'none', pathMatch: 'full' },\n          {\n            path: 'none',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'screen_share',\n              animation: 'Four',\n            },\n          },\n          {\n            path: 'rated',\n            component: MsList,\n            data: {\n              reuse: true,\n              icon: 'rate_ext',\n            },\n          },\n        ],\n      },\n      {\n        path: 'rate_give',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'rate_ext_give',\n          double: true,\n        },\n      },\n      {\n        path: 'rate_receive',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'rate_ext_receive',\n          double: true,\n        },\n      },\n      {\n        path: 'rate_both',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'rate_ext_both',\n          double: true,\n        },\n      },\n      {\n        path: 'rate_met',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'history',\n          double: true,\n        },\n        // filter button - hasonlosag vagy lokalizacio (ez ugyanaz amikor a resztvevoket valasztja ki egy esemenyhez)\n        // basket component filter button\n      },\n      // ?state=active,pending,none\n    ],\n  },\n  {\n    path: 'user',\n    data: {\n      reuse: true,\n      icon: 'person',\n      //type: 'P',\n    },\n    children: [\n      { path: '', redirectTo: 'profile', pathMatch: 'full' },\n      {\n        path: 'profile',\n        component: PanelComponent,\n        data: {\n          reuse: true,\n          //icon: 'profile_ext',\n          actions: [\n            /*{\n              component: RewardComponent,\n              type: 'share',\n              icon: 'send',\n            },\n            {\n              component: RewardComponent,\n              type: 'reward',\n              icon: 'military_tech',\n            },*/\n            {\n              component: SettingComponent,\n              type: 'logout',\n              icon: 'logout',\n              color: 'warn',\n            },\n            { component: ProfileComponent, type: 'edit', icon: 'edit' },\n          ],\n        },\n      },\n      /*{\n        path: 'cars',\n        component: MsList,\n        data: {\n          reuse: true,\n          icon: 'car_ext',\n          actions: [\n            {\n              component: CarFormComponent,\n              type: 'add',\n              icon: 'add',\n            },\n            {\n              component: CarFormComponent,\n              type: 'edit',\n            },\n          ],\n          event: true, //temporary\n        },\n      },*/\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DatingRoutingModule {}\n","import { HttpEventType } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Canvas } from 'src/lib/offscreen';\nimport { HttpService } from '../../../services/http.service';\nimport { EventBusService } from '../../../services/event-bus.service';\n\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n})\nexport class EditorComponent implements OnInit {\n  private mtx: any;\n  private img: any;\n  private size: any;\n  private file: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  constructor(\n    public dialogRef: MatDialogRef<EditorComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private eventBusService: EventBusService,\n    public httpService: HttpService,\n    private domSanitizer: DomSanitizer\n  ) {}\n\n  onChange(evt) {\n    if (evt.img) {\n      this.img = evt.img;\n    }\n\n    if (evt.size) {\n      this.size = evt.size;\n    }\n\n    if (evt.mtx) {\n      this.mtx = evt.mtx;\n    }\n  }\n\n  ngOnInit(): void {}\n\n  onClick(): void {\n    const canvas = new Canvas(this.size.width, this.size.width);\n    const img = canvas.load(this.img, this.mtx, 0.9);\n\n    const edited = new Blob([img], { type: 'application/octet-stream' });\n\n    this.progress.mode = 'indeterminate';\n\n    const url =\n      'images' +\n      (this.data.value !== undefined ? '/' + this.data.value.name : '');\n\n    const formData = new FormData();\n    /*\n    for (const paramName in params) {\n      formData.append(imgCanvas[],img);\n    }\n    */\n    formData.append('orig', this.file);\n    formData.append('edited', edited);\n\n    this.httpService.upload(url, formData).subscribe({\n      next: (event) => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.progress.mode = 'determine';\n          this.progress.value = Math.round(100 * (event.loaded / event.total));\n        } else if (event.type === HttpEventType.Response) {\n          if (event.status === 201 || event.status === 200) {\n            this.dialogRef.close({\n              id: event.body['name'],\n              idx: this.data.idx,\n              mtx: this.mtx,\n            });\n          }\n        }\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n\n  selectFile(e?) {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      this.data.src = reader.result as string;\n    };\n    if (e.target.files[0]) {\n      this.file = e.target.files[0];\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  rotate(value) {\n    this.eventBusService.rotate.emit({ degree: value });\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-dialog-img\">\n  <ms-editor *ngIf=\"data\" [data]=\"data\" (changed)=\"onChange($event)\"></ms-editor>\n</div>\n<div mat-dialog-actions align=\"center\">\n  <button mat-icon-button (click)=\"rotate(-90)\">\n    <mat-icon>rotate_left</mat-icon>\n  </button>\n  <button mat-icon-button (click)=\"fileInput.click()\">\n    <mat-icon>image_search</mat-icon>\n  </button>\n  <input type=\"file\" #fileInput class=\"file_button\" (change)=\"selectFile($event)\"/>\n  <button mat-icon-button (click)=\"rotate(90)\">\n    <mat-icon>rotate_right</mat-icon>\n  </button>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\n\ninterface Option {\n  value: string;\n  viewValue: string;\n}\n@Component({\n  selector: 'app-event-filter',\n  templateUrl: './event-filter.component.html',\n})\nexport class EventFilterComponent implements OnInit {\n  formGroup: FormGroup;\n\n  categories: any;\n  currencies: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<EventFilterComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dataService: DataService\n  ) {\n    this.categories = this.dataService.eventCategories;\n    this.currencies = this.dataService.currencies;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      category: [''],\n      city: [''],\n      free: [''],\n      /*amount: this.fb.group({\n        from: [\"\", [Validators.required, Validators.pattern(\"^[0-9]*$\")]],\n        to: [\"\", [Validators.required, Validators.pattern(\"^[0-9]*$\")]],\n        currency: [\"\", Validators.required]\n      }),*/\n    });\n  }\n\n  onClick(): void {\n    let raw;\n\n    if (this.formGroup.valid) {\n      raw = this.formGroup.getRawValue();\n    }\n    this.dialogRef.close(raw);\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-form-field>\n      <mat-label>Category</mat-label>\n      <mat-select formControlName=\"category\">\n        <mat-option\n          *ngFor=\"let category of categories\"\n          [value]=\"category.value\"\n        >\n          {{ category.viewValue }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>City</mat-label>\n      <input matInput formControlName=\"city\" />\n      <mat-error *ngIf=\"formGroup.controls['city'].invalid\"\n        >City is required!</mat-error\n      >\n    </mat-form-field>\n    <mat-slide-toggle labelPosition=\"before\" #paid formControlName=\"free\">{{\n      paid.checked ? 'Paid' : 'Free'\n    }}</mat-slide-toggle>\n    <!--<fieldset *ngIf=\"paid.checked\" formGroupName=\"amount\">\n    <legend>Amount</legend>\n    <mat-form-field>\n      <mat-label>From</mat-label>\n      <input matInput formControlName=\"from\" type=\"number\"/>\n      <mat-error *ngIf=\"formGroup.controls.amount.controls['from'].invalid\"\n        >Number is required!</mat-error\n      >\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>To</mat-label>\n      <input matInput formControlName=\"to\" type=\"number\"/>\n      <mat-error *ngIf=\"formGroup.controls.amount.controls['to'].invalid\"\n        >Number is required!</mat-error\n      >\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Currency</mat-label>\n      <mat-select formControlName=\"currency\">\n        <mat-option\n          *ngFor=\"let currency of currencies\"\n          [value]=\"currency.value\"\n        >\n          {{ currency.viewValue }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </fieldset>-->\n  </form>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DataService } from 'src/app/services/data.service';\n\n// Group-Filter has the common filter settings handling - this component will be removed\ninterface Option {\n  value: string;\n  viewValue: string;\n}\n@Component({\n  selector: 'app-promotion-filter',\n  templateUrl: './promotion-filter.component.html',\n})\nexport class PromotionFilterComponent implements OnInit {\n  formGroup: FormGroup;\n\n  types: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<PromotionFilterComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dataService: DataService\n  ) {\n    this.types = this.dataService.templateTypes;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      type: [this.data.type],\n      rated: [this.data.rated],\n    });\n  }\n\n  onClick(): void {\n    let raw;\n\n    if (this.formGroup.valid) {\n      raw = this.formGroup.getRawValue();\n    }\n    this.dialogRef.close(raw);\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-form-field>\n      <mat-label>Type</mat-label>\n      <mat-select formControlName=\"type\">\n        <mat-option\n          *ngFor=\"let type of types\"\n          [value]=\"type.value\"\n        >\n          {{ type.viewValue }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </form>\n</div>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport firebase from 'firebase/app';\nimport { NavigationService } from 'src/app/navigation.service';\nimport { HttpService } from 'src/app/services/http.service';\nimport { environment } from 'src/environments/environment';\nimport { MsDialog } from 'src/lib';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './setting.component.html',\n})\nexport class SettingComponent implements OnInit {\n  progress: any = { mode: 'determine', value: 0, color: 'primary' };\n\n  url: any;\n\n  formGroup: FormGroup;\n\n  groups: any = [];\n\n  selected;\n\n  current;\n\n  constructor(\n    private router: Router,\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<SettingComponent>,\n    public dialog: MatDialog,\n    private httpService: HttpService,\n    private navService: NavigationService\n  ) {\n    this.url = '/user';\n  }\n\n  ngOnInit(): void {\n    const params = new HttpParams();\n\n    this.httpService.get(this.url, params).subscribe({\n      next: (data) => {\n        this.init(data);\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  onSelect(evt) {\n    const idx = this.groups.findIndex((group) => group.value === evt.value);\n    this.selected = this.groups[idx];\n  }\n\n  init(data) {\n    this.current = data['user'].group;\n\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        key: [data['user'].group, Validators.required],\n      }),\n    });\n\n    const groups = [];\n    for (const item of data['groups']) {\n      groups.push({\n        value: item.group.key,\n        viewValue: item.group.name,\n        system: item.group.system,\n      });\n    }\n    this.groups = groups;\n\n    this.onSelect({ value: data['user'].group });\n  }\n\n  leave() {\n    this.openConfirmation(\n      'Would you like to leave the ' + this.selected.viewValue + ' group!'\n    );\n  }\n\n  openConfirmation(msg) {\n    const dialogRef = this.dialog.open(MsDialog, {\n      data: {\n        msg,\n        btn: 'Yes',\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === true) {\n        const params = new HttpParams();\n\n        this.httpService\n          .save(this.url + '/groups/' + this.selected.value + '/leave', params)\n          .subscribe({\n            next: (data) => {\n              this.init(data);\n            },\n            error: (error) => {\n              this.progress.mode = 'determine';\n              this.progress.color = 'warn';\n            },\n            complete: () => {\n              console.log('complete');\n            },\n          });\n      }\n    });\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      const raw = this.formGroup.getRawValue();\n\n      const formData = new FormData();\n\n      const groupForm = new Blob([JSON.stringify(raw.data)], {\n        type: 'application/json',\n      });\n      formData.append('group', groupForm);\n\n      this.httpService.save(this.url, formData).subscribe({\n        next: (value) => {\n          const group = value['user'].group;\n          const groups = value['groups'];\n\n          let groupType;\n          for (const item of groups) {\n            if (item.group.key === group) {\n              groupType = environment.groupTypes[item.group.type];\n              this.navService.groupName = item.group.name[0];\n              break;\n            }\n          }\n\n          const notif = {};\n          for (const like of value['likes']) {\n            notif[groupType + '/' + like.root] = like.value;\n          }\n          this.navService.notif = notif;\n\n          if (\n            value['user'].profile === undefined ||\n            value['user'].profile.status === 'I'\n          ) {\n            this.router.navigate([groupType + '/user']);\n          } else {\n            this.router.navigate([groupType]);\n          }\n\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    // stale value !!!\n    this.dialogRef.close();\n  }\n\n  logout(): void {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        console.log('logout');\n        this.navService.reset.next();\n        this.back();\n      })\n      .catch((error) => {\n        // An error happened.\n      });\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>&nbsp;\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<form default *ngIf=\"formGroup\" [formGroup]=\"formGroup\">\n  <div formGroupName=\"data\">\n    <!--<fieldset>\n      <legend>Group</legend>\n      <mat-form-field>\n        <mat-select [formControlName]=\"'key'\" (selectionChange)=\"onSelect($event)\">\n          <mat-option *ngFor=\"let group of groups\" [value]=\"group.value\">\n            {{ group.viewValue }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <button *ngIf=\"!selected.system\" mat-raised-button color=\"warn\" (click)=\"leave()\">\n        Leave\n      </button>\n      <button *ngIf=\"selected.value !== current\" mat-raised-button color=\"primary\" (click)=\"onClick()\">\n        Switch\n      </button>\n    </fieldset>-->\n    <div button-row>\n      <button mat-raised-button color=\"accent\" (click)=\"logout()\">\n        Logout\n      </button>\n    </div>\n  </div>\n</form>\n","export * from './basket/basket.component';\nexport * from './editor/editor.component';\nexport * from './event/event.component';\nexport * from './panel/panel.component';\nexport * from './qrcode/qrcode.component';\nexport * from './reward/reward.component';\nexport * from './help/help.component';\nexport * from './forms';\n","export * from './car/car.component';\nexport * from './group/group.component';\nexport * from  './event-filter/event-filter.component';\nexport * from  './promotion-filter/promotion-filter.component';\nexport * from  './group-filter/group-filter.component';\nexport * from  './event/event.component';\nexport * from  './profile/profile.component';\nexport * from  './setting/setting.component';\nexport * from  './feedback/feedback.component';\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from '../../../services/data.service';\n\n@Component({\n  selector: 'app-reward',\n  templateUrl: './reward.component.html',\n})\nexport class RewardComponent implements OnInit {\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  rewards: any;\n\n  constructor(\n    public dialogRef: MatDialogRef<RewardComponent>,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    const params = new HttpParams();\n\n    this.httpService.get(this.url + '/rewards', params).subscribe({\n      next: (result) => {\n        this.rewards = result;\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div>\n  <fieldset *ngFor=\"let reward of rewards\">\n    <legend>{{reward.name}}</legend>\n    <b>People invited:</b> {{reward.cnt}}\n  </fieldset>\n</div>\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UIModule } from '../ui/ui.module';\nimport {\n  BasketComponent,\n  CarFormComponent,\n  EditorComponent,\n  EventComponent,\n  EventFilterComponent,\n  EventFormComponent,\n  FeedbackFormComponent,\n  GroupFilterComponent,\n  GroupFormComponent,\n  HelpComponent,\n  PanelComponent,\n  ProfileComponent,\n  PromotionFilterComponent,\n  QrcodeComponent,\n  RewardComponent,\n  SettingComponent\n} from './components';\nimport { DatingRoutingModule } from './dating-routing.module';\n@NgModule({\n  declarations: [\n    CarFormComponent,\n    ProfileComponent,\n    SettingComponent,\n    EventFormComponent,\n    EventFilterComponent,\n    PromotionFilterComponent,\n    GroupFilterComponent,\n    PanelComponent,\n    EditorComponent,\n    BasketComponent,\n    EventComponent,\n    FeedbackFormComponent,\n    QrcodeComponent,\n    HelpComponent,\n    GroupFormComponent,\n    RewardComponent,\n  ],\n  imports: [\n    UIModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    DatingRoutingModule,\n  ],\n  providers: [DatePipe],\n})\nexport class DatingModule {}\n","import { HttpParams } from '@angular/common/http';\nimport {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injector,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { HttpService } from 'src/app/services/http.service';\nimport { MsPanel } from 'src/lib';\nimport { DataService } from '../../../services/data.service';\nimport { TransformService } from '../../../services/transform.service';\n\nconst injector = Injector.create({\n  providers: [{ provide: MsPanel, deps: [] }],\n});\n\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n})\nexport class PanelComponent implements OnInit, OnDestroy {\n  @ViewChild('panel', { static: true, read: ViewContainerRef })\n  panelRef: ViewContainerRef;\n\n  private sub: Subscription;\n\n  actions: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  value: any;\n\n  private url: any;\n  private itemUrl: any;\n\n  private comp: ComponentRef<MsPanel>;\n\n  constructor(\n    private cfr: ComponentFactoryResolver,\n    private activatedRoute: ActivatedRoute,\n    public dialog: MatDialog,\n    public dataService: DataService,\n    private httpService: HttpService,\n    public transformService: TransformService\n  ) {\n    let url = this.activatedRoute['_routerState'].snapshot.url;\n    this.itemUrl = url;\n\n    url = url.substring(1);\n    this.url = url.substring(url.indexOf('/'));\n\n    this.progress.mode = 'indeterminate';\n\n    this.httpService.get(this.url).subscribe({\n      next: (value) => {\n        this.value = value;\n\n        const componentFactory = this.cfr.resolveComponentFactory(MsPanel);\n        const component = componentFactory.create(injector);\n\n        let msg;\n        if (this.value['profile'].status !== 'P') {\n          msg = this.transformService.transform(value, this.itemUrl);\n        }\n\n        component.instance.onEnter('', msg);\n\n        component.instance.show(true, true);\n        this.panelRef.insert(component.hostView);\n        this.comp = component;\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n\n  doAction(idx) {\n    switch (this.actions[idx].type) {\n      case 'share':\n        const params = new HttpParams();\n\n        this.httpService.get(this.url + '/share', params).subscribe({\n          next: (result) => {\n            if (navigator.share) {\n              navigator\n                .share({\n                  title: result['info'].title,\n                  text: result['info'].msg,\n                  url: location.origin + '?xlink=' + result['link'].key,\n                })\n                .then(() => {\n                  console.log('Thanks for sharing!');\n                })\n                .catch(console.error);\n            } else {\n              console.log({\n                title: result['info'].title,\n                text: result['info'].msg,\n                url: location.origin + '?xlink=' + result['link'].key,\n              });\n              alert('Not implemented for desktop!');\n            }\n          },\n          error: (error) => {\n            this.progress.mode = 'determine';\n            this.progress.color = 'warn';\n          },\n          complete: () => {\n            console.log('complete');\n          },\n        });\n        break;\n      default:\n        this.openDialog(idx);\n    }\n  }\n\n  openDialog(idx) {\n    const dialogRef = this.dialog.open(this.actions[idx].component, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: { value: this.value, url: this.url },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      switch (this.actions[idx].type) {\n        case 'filter':\n          break;\n        case 'add':\n          break;\n        case 'attach':\n          break;\n        case 'logout':\n          break;\n        case 'edit':\n          if (result !== undefined) {\n            this.value = result;\n            this.comp.instance.onEnter(\n              '',\n              this.transformService.transform(result, this.itemUrl, false, true)\n            );\n            this.panelRef.insert(this.comp.hostView);\n          }\n          break;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.data.subscribe((v) => {\n      this.actions = v.actions;\n    });\n  }\n}\n","<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<ng-container #panel class=\"big_panel\">\n</ng-container>\n<div class=\"mat-fab-container\">\n  <button\n    *ngFor=\"let action of actions; let idx = index\"\n    mat-mini-fab\n    [color]=\"action.color ? action.color : 'primary'\"\n    (click)=\"doAction(idx)\"\n  >\n    <mat-icon>{{ action.icon }}</mat-icon>\n  </button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-event',\n  templateUrl: './event.component.html',\n})\nexport class EventComponent implements OnInit {\n  constructor(public dialogRef: MatDialogRef<EventComponent>) {}\n\n  ngOnInit(): void {}\n\n  onClick(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  Event\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from '../../../services/data.service';\n\n@Component({\n  selector: 'app-qrcode',\n  templateUrl: './qrcode.component.html',\n})\nexport class QrcodeComponent implements OnInit {\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n  \n  camera = false;\n  qrCode = 'sample text';\n\n  constructor(\n    public dialogRef: MatDialogRef<QrcodeComponent>,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    const params = new HttpParams();\n\n    this.httpService.get(this.url + '/code', params).subscribe({\n      next: (result) => {\n        this.qrCode = result['code'];\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        console.log('complete');\n      },\n    });\n  }\n\n  onScanned(evt): void {\n    this.httpService.post(this.url + '/verify', { code: evt }).subscribe({\n      next: (value) => {\n        this.dialogRef.close(value);\n      },\n      error: (error) => {\n        this.progress.mode = 'determine';\n        this.progress.color = 'warn';\n      },\n      complete: () => {\n        this.progress.mode = 'determine';\n      },\n    });\n  }\n\n  turnCamera(on = false): void {\n    this.camera = on;\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-dialog-img\">\n  <ms-qrcode [qrCode]=\"qrCode\" [camera]=\"camera\" (msScanned)=\"onScanned($event)\"></ms-qrcode>\n</div>\n<div mat-dialog-actions align=\"center\">\n  <button *ngIf=\"!camera\" mat-icon-button (click)=\"turnCamera(true)\">\n    <mat-icon>cameraswitch</mat-icon>\n  </button>\n  <button *ngIf=\"camera\" mat-icon-button (click)=\"turnCamera(false)\">\n    <mat-icon>qr_code</mat-icon>\n  </button>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpService } from 'src/app/services/http.service';\n\n@Component({\n  selector: 'app-basket',\n  templateUrl: './basket.component.html',\n})\nexport class BasketComponent implements OnInit {\n  items: Array<any> = new Array();\n\n  selectedIdx: any;\n  overlayData: any;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n\n  url: any;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public dialogRef: MatDialogRef<BasketComponent>,\n    private activatedRoute: ActivatedRoute,\n    private httpService: HttpService\n  ) {\n    /*if (data.url !== undefined) {\n      this.url = data.url;\n    } else {*/\n    let url = this.activatedRoute['_routerState'].snapshot.url.replace(\n      '/base',\n      ''\n    );\n\n    url = url.substring(1);\n    this.url = url.substring(url.indexOf('/'));\n\n    //}\n  }\n\n  ngOnInit(): void {\n    if (this.data.selected !== undefined) {\n      this.onSelect(this.data.selected);\n    }\n  }\n\n  onClick(): void {\n    // attach the selected members\n    if (this.items.length > 0) {\n      if (this.data.save !== false) {\n        this.progress.mode = 'indeterminate';\n\n        const keys = new Array();\n        for (const item of this.items) {\n          keys.push(item.info.id);\n        }\n\n        this.httpService.save(this.url, keys).subscribe({\n          next: (value) => {\n            this.dialogRef.close(value);\n          },\n          error: (error) => {\n            this.progress.mode = 'determine';\n            this.progress.color = 'warn';\n          },\n          complete: () => {\n            this.progress.mode = 'determine';\n          },\n        });\n      } else {\n        this.dialogRef.close(this.items);\n      }\n    }\n  }\n\n  onBasket(idx): void {\n    if (idx === this.selectedIdx) {\n      this.selectedIdx = undefined;\n      this.overlayData = undefined;\n    } else {\n      this.selectedIdx = idx;\n      this.overlayData = this.items[idx].info;\n    }\n  }\n\n  onDelete(): void {\n    this.items.splice(this.selectedIdx, 1);\n    this.onBasket(this.selectedIdx);\n  }\n\n  onSelect(evt): void {\n    const items = new Array();\n    for (const item in evt) {\n      if (evt.hasOwnProperty(item)) {\n        items.push(evt[item]);\n      }\n    }\n    this.items = items; // [].concat(this.items.concat(items));\n  }\n\n  back(): void {\n    if (this.data.reset) {\n      this.dialogRef.close({});\n    } else {\n      this.dialogRef.close();\n    }\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  <div class=\"mat-basket-container\" *ngIf=\"!data.dialog\">\n    <mat-chip-list>\n      <mat-chip\n        *ngFor=\"let item of items; let idx = index\"\n        (click)=\"onBasket(idx)\" [ngClass]=\"{'ms-active': idx === selectedIdx}\"\n        matRipple\n      >\n      <p *ngIf=\"item.info.imgs && item.info.imgs[0]\" style=\"width: 40px;\">{{ item.info.header ? item.info.header.main : '' }}</p>\n      <p *ngIf=\"!item.info.imgs || !item.info.imgs[0]\">{{ item.info.header ? item.info.header.main : '' }}</p>\n        <mat-chip-avatar *ngIf=\"item.info.imgs && item.info.imgs[0]\"><img [src]=\"item.info.imgs[0]\"/></mat-chip-avatar>\n      </mat-chip>\n    </mat-chip-list>\n  </div>\n  <button mat-icon-button class=\"mat-close\" (click)=\"onClick()\" *ngIf=\"!data.dialog\">\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<div class=\"mat-basket-content\">\n  <ms-list\n    [url]=\"data.url\"\n    [multiple]=\"data.multiple\"\n    [actions]=\"data.actions\"\n    (msSelect)=\"onSelect($event)\"\n    [overlayData]=\"overlayData\"\n    (msDelete)=\"onDelete()\"\n    [selectable]=\"!data.dialog && true\"\n  >\n  </ms-list>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { HttpService } from 'src/app/services/http.service';\nimport { DataService } from 'src/app/services/data.service';\n\n@Component({\n  selector: 'app-feedback',\n  templateUrl: './feedback.component.html',\n})\nexport class FeedbackFormComponent implements OnInit {\n  formGroup: FormGroup;\n\n  progress: any = { mode: 'determine', value: 100, color: 'primary' };\n  private url: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<FeedbackFormComponent>,\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private httpService: HttpService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.data = data.value ? data.value : { images: [] };\n    this.url = data.url;\n  }\n\n  ngOnInit(): void {\n    this.formGroup = this.fb.group({\n      data: this.fb.group({\n        rate: [this.data.rate, Validators.required],\n        desc: [\n          this.data.desc !== undefined ? this.data.desc : '',\n          [\n            Validators.required,\n            Validators.minLength(10),\n            Validators.maxLength(160),\n          ],\n        ],\n      }),\n    });\n  }\n\n  onRate(evt): void {\n    this.data.rate = evt.value;\n  }\n\n  onClick(): void {\n    if (this.formGroup.valid) {\n      this.progress.mode = 'indeterminate';\n\n      let raw = this.formGroup.getRawValue();\n      this.httpService.save(this.url, raw.data).subscribe({\n        next: (value) => {\n          this.dialogRef.close(value);\n        },\n        error: (error) => {\n          this.progress.mode = 'determine';\n          this.progress.color = 'warn';\n        },\n        complete: () => {\n          this.progress.mode = 'determine';\n        },\n      });\n    }\n  }\n\n  back(): void {\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>\n  <button mat-icon-button class=\"mat-cancel\" (click)=\"back()\">\n    <mat-icon>arrow_backward</mat-icon>\n  </button>\n  &nbsp;\n  <button\n    mat-icon-button\n    class=\"mat-close\"\n    [style.background-color]=\"formGroup.valid ? 'yellowgreen' : '#f44336'\"\n    (click)=\"onClick()\"\n  >\n    <mat-icon>done</mat-icon>\n  </button>\n</h1>\n<mat-progress-bar\n  [mode]=\"progress.mode\"\n  [value]=\"progress.value\"\n  [color]=\"progress.color\"\n></mat-progress-bar>\n<div mat-dialog-content class=\"mat-form\">\n  <form default [formGroup]=\"formGroup\">\n    <mat-accordion>\n      <mat-expansion-panel formGroupName=\"data\">\n        <mat-expansion-panel-header\n          [style.background-color]=\"\n            formGroup.controls.data.valid ? 'yellowgreen' : '#f44336'\n          \"\n        >\n          <mat-panel-title>Feedback</mat-panel-title>\n        </mat-expansion-panel-header>\n        <fieldset>\n          <legend>Rate</legend>\n          <div legend-right>{{ data.rate }}</div>\n          <mat-slider\n            min=\"0\"\n            max=\"9\"\n            [formControlName]=\"'rate'\"\n            (input)=\"onRate($event)\"\n          ></mat-slider>\n        </fieldset>\n        <fieldset>\n          <legend>Description (min. 10, max. 160)</legend>\n          <div legend-right>\n            {{ formGroup.controls.data.get('desc').value.length }}\n          </div>\n          <mat-form-field>\n            <textarea\n              matInput\n              [formControlName]=\"'desc'\"\n              rows=\"5\"\n              maxlength=\"160\"\n            ></textarea>\n            <mat-error *ngIf=\"formGroup.controls.data.get('desc').invalid\"\n              >Description is required!</mat-error\n            >\n          </mat-form-field>\n        </fieldset>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n"]}